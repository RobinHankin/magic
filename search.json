[{"path":"https://robinhankin.github.io/magic/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/magic/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to magic","title":"Contributing to magic","text":"Thank considering contributing magic! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/magic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/magic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin, R. K. S. (2005). Recreational mathematics R: introducing 'magic' package R News, volume 5, number 1, pages 48-51","code":"@Article{,   title = {Recreational mathematics with R: introducing the 'magic' package},   author = {{Robin K. S. Hankin}},   journal = {R News},   year = {2005},   volume = {5},   number = {1},   pages = {48-51}, }"},{"path":[]},{"path":"https://robinhankin.github.io/magic/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create and Investigate Magic Squares","text":"magic package implements functionality manipulating high-dimensional arrays using efficient vectorised methods. original application high-dimensional magic hypercubes. README shows useful functions package.","code":""},{"path":"https://robinhankin.github.io/magic/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Investigate Magic Squares","text":"can install released version magic CRAN :","code":"# install.packages(\"magic\")  # uncomment this to install the package library(\"magic\")"},{"path":"https://robinhankin.github.io/magic/index.html","id":"package-highlights","dir":"","previous_headings":"","what":"Package highlights","title":"Create and Investigate Magic Squares","text":"Function adiag() binds arbitrarily-dimensioned arrays corner--corner Function apad() pads arbitrarily-dimensioned arrays Function apldrop() replacement APL’s drop Function aplus() superimposes two arrays different dimensions returns sum overlapping elements Function arev() multidimensional generalization rev() Function arot() generalization matlab’s rotdim Function fnsd() returns first nonsingleton dimension arbitrary dimensioned array Function ashift() shifts origin arbitrary dimensioned arrays Much package functionality vectorised array dimension.","code":""},{"path":"https://robinhankin.github.io/magic/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"Create and Investigate Magic Squares","text":"detail, see package vignette vignette(\"magic\")","code":""},{"path":"https://robinhankin.github.io/magic/reference/Frankenstein.html","id":null,"dir":"Reference","previous_headings":"","what":"A perfect magic cube due to Frankenstein — Frankenstein","title":"A perfect magic cube due to Frankenstein — Frankenstein","text":"perfect magic cube due Frankenstein","code":""},{"path":"https://robinhankin.github.io/magic/reference/Frankenstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A perfect magic cube due to Frankenstein — Frankenstein","text":"","code":"data(Frankenstein)"},{"path":"https://robinhankin.github.io/magic/reference/Frankenstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A perfect magic cube due to Frankenstein — Frankenstein","text":"","code":"data(Frankenstein) is.perfect(Frankenstein) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/Ollerenshaw.html","id":null,"dir":"Reference","previous_headings":"","what":"A most perfect square due to Ollerenshaw — Ollerenshaw","title":"A most perfect square due to Ollerenshaw — Ollerenshaw","text":"12--12 perfect square due Ollerenshaw","code":""},{"path":"https://robinhankin.github.io/magic/reference/Ollerenshaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A most perfect square due to Ollerenshaw — Ollerenshaw","text":"","code":"data(Ollerenshaw)"},{"path":"https://robinhankin.github.io/magic/reference/Ollerenshaw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A most perfect square due to Ollerenshaw — Ollerenshaw","text":"“perfect pandiagonal magic squares”, K. Ollerenshaw D. Bree,   1998, Institute Mathematics applications","code":""},{"path":"https://robinhankin.github.io/magic/reference/Ollerenshaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A most perfect square due to Ollerenshaw — Ollerenshaw","text":"","code":"data(Ollerenshaw) is.mostperfect(Ollerenshaw) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Binds arrays corner-to-corner — adiag","title":"Binds arrays corner-to-corner — adiag","text":"Array generalization blockdiag()","code":""},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binds arrays corner-to-corner — adiag","text":"","code":"adiag(... , pad=as.integer(0), do.dimnames=TRUE) adiag2(a, b, pad=as.integer(0), do.dimnames=TRUE)"},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binds arrays corner-to-corner — adiag","text":", b, ... Arrays joined pad Value pad array ; note default keeps integer status     arrays .dimnames Boolean, default TRUE meaning return     dimnames possible.  Set FALSE performance     issue","code":""},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binds arrays corner-to-corner — adiag","text":"Function adiag2() binds two arrays together, corner--corner. Function adiag() binds number arrays together.  function associative provided pad length 1, page discusses two array case implemented adiag2(). first argument list, interpreted list arrays bound together. Suppose x <- adiag(,b) dim()=c(a_1,...,a_d), dim(b)=c(b_1,...,b_d).  (dim(x)==dim()+dim(b)); x[1:a_1,...,1:a_d]==x[(a_1+1):(a_1+b_1),...,(a_d+1):(a_d+b_d)]==b. Dimnames preserved, arrays non-null dimnames, .dimnames TRUE. Argument pad usually length-one vector, vector acceptable; standard recycling used.  aware output array (dimension dim()+dim(b)) filled (copies ) pad b copied.  can confusing.","code":""},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binds arrays corner-to-corner — adiag","text":"Returns array dimensions dim()+dim(b) described .","code":""},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Binds arrays corner-to-corner — adiag","text":"Peter Wolf additions Robin Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Binds arrays corner-to-corner — adiag","text":"adiag(,b), length-one vector, coerced array dimensions rep(1,length(dim(b))); likewise b.  b length-one vectors, return diag(c(,b)). b arrays, function adiag() requires length(dim())==length(dim(b)) (function guess dimensions dropped; see examples section).  particular, note vectors coerced except length one. adiag() used padding magic hypercubes context evaluating subarray sums.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/adiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binds arrays corner-to-corner — adiag","text":"","code":"a <- array( 1,c(2,2))  b <- array(-1,c(2,2))  adiag(a,b) #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    0    0 #> [2,]    1    1    0    0 #> [3,]    0    0   -1   -1 #> [4,]    0    0   -1   -1   ## dropped dimensions can count:   b2 <- b1 <- b  dim(a) <- c(2,1,2)  dim(b1) <- c(2,2,1)  dim(b2) <- c(1,2,2)   dim(adiag(a,b1)) #> [1] 4 3 3  dim(adiag(a,b2)) #> [1] 3 3 4  ## dimnames are preserved if not null:  a <- matrix(1,2,2,dimnames=list(col=c(\"red\",\"blue\"),size=c(\"big\",\"small\")))  b <- 8 dim(b) <- c(1,1) dimnames(b) <- list(col=c(\"green\"),size=c(\"tiny\")) adiag(a,b)   #dimnames preserved #>        size #> col     big small tiny #>   red     1     1    0 #>   blue    1     1    0 #>   green   0     0    8 adiag(a,8)   #dimnames lost because second argument has none. #>      [,1] [,2] [,3] #> [1,]    1    1    0 #> [2,]    1    1    0 #> [3,]    0    0    8  ## non scalar values for pad can be confusing: q <- matrix(0,3,3) adiag(q,q,pad=1:4) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0    3    1    3 #> [2,]    0    0    0    4    2    4 #> [3,]    0    0    0    1    3    1 #> [4,]    4    2    4    0    0    0 #> [5,]    1    3    1    0    0    0 #> [6,]    2    4    2    0    0    0  ## following example should make the pattern clear: adiag(q,q,pad=1:36) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    0    0   19   25   31 #> [2,]    0    0    0   20   26   32 #> [3,]    0    0    0   21   27   33 #> [4,]    4   10   16    0    0    0 #> [5,]    5   11   17    0    0    0 #> [6,]    6   12   18    0    0    0   # Now, a use for arrays with dimensions of zero extent: z <- array(dim=c(0,3)) colnames(z) <- c(\"foo\",\"bar\",\"baz\")  adiag(a,z)        # Observe how this has #>       size #> col    big small foo bar baz #>   red    1     1   0   0   0 #>   blue   1     1   0   0   0                   # added no (ie zero) rows to \"a\" but                   # three extra columns filled with the pad value  adiag(a,t(z)) #>       size #> col    big small #>   red    1     1 #>   blue   1     1 #>   foo    0     0 #>   bar    0     0 #>   baz    0     0 adiag(z,t(z))     # just the pad value #>     foo bar baz #> foo   0   0   0 #> bar   0   0   0 #> baz   0   0   0"},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":null,"dir":"Reference","previous_headings":"","what":"Subhypercubes of magic hypercubes — allsubhypercubes","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"Extracts subhypercubes n-dimensional hypercube.","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"","code":"allsubhypercubes(a)"},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"magic hypercube whose subhypercubes computed","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"Returns list, element subhypercube .   Note major diagonals also returned (n--1 arrays). names list extracted subhypercubes.  Consider   <- magichypercube.4n(1,d=4) (n=4) jj <-   allsubhypercubes(), consider jj[9].  name   jj[9] \"n-+1,,,\"; value square matrix.    columns jj[9] may recovered [n-+1,,,]   \\(=1\\ldots n\\) (NB: ,   jj[[9]] == cbind([n-1+1,1,1,],   [n-2+1,2,2,], [n-3+1,3,3,], [n-4+1,4,4,]) n=4). list include whole array.","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"function dog's dinner.  complicated, convoluted,   needs absurd use eval(parse(text=...))   construction.  Basically sucks big time. ... life see better way gives   results, without loops, hypercubes arbitrary dimension. 256MB Linuxbox, allsubhypercubes() cope   d high 5, n=4.  Heigh ho. term “subhypercube” include diagonally oriented   entities .magichypercube.  .","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/allsubhypercubes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subhypercubes of magic hypercubes — allsubhypercubes","text":"","code":"a <- magichypercube.4n(1,d=4)   allsubhypercubes(a) #> $`i,i,,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  240   81  145   48 #> [3,]  224   97  161   32 #> [4,]   49  144   80  241 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    6  187  123  198 #> [2,]  235   86  150   43 #> [3,]  219  102  166   27 #> [4,]   54  139   75  246 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   11  182  118  203 #> [2,]  230   91  155   38 #> [3,]  214  107  171   22 #> [4,]   59  134   70  251 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   16  177  113  208 #> [2,]  225   96  160   33 #> [3,]  209  112  176   17 #> [4,]   64  129   65  256 #>  #>  #> $`n-i+1,i,,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  189  125  196 #> [2,]  237   84  148   45 #> [3,]  221  100  164   29 #> [4,]   52  141   77  244 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    7  186  122  199 #> [2,]  234   87  151   42 #> [3,]  218  103  167   26 #> [4,]   55  138   74  247 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   10  183  119  202 #> [2,]  231   90  154   39 #> [3,]  215  106  170   23 #> [4,]   58  135   71  250 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  180  116  205 #> [2,]  228   93  157   36 #> [3,]  212  109  173   20 #> [4,]   61  132   68  253 #>  #>  #> $`i,n-i+1,,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  180  116  205 #> [2,]  228   93  157   36 #> [3,]  212  109  173   20 #> [4,]   61  132   68  253 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   10  183  119  202 #> [2,]  231   90  154   39 #> [3,]  215  106  170   23 #> [4,]   58  135   71  250 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    7  186  122  199 #> [2,]  234   87  151   42 #> [3,]  218  103  167   26 #> [4,]   55  138   74  247 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  189  125  196 #> [2,]  237   84  148   45 #> [3,]  221  100  164   29 #> [4,]   52  141   77  244 #>  #>  #> $`n-i+1,n-i+1,,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   16  177  113  208 #> [2,]  225   96  160   33 #> [3,]  209  112  176   17 #> [4,]   64  129   65  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   11  182  118  203 #> [2,]  230   91  155   38 #> [3,]  214  107  171   22 #> [4,]   59  134   70  251 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    6  187  123  198 #> [2,]  235   86  150   43 #> [3,]  219  102  166   27 #> [4,]   54  139   75  246 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  240   81  145   48 #> [3,]  224   97  161   32 #> [4,]   49  144   80  241 #>  #>  #> $`i,,i,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  252   69  133   60 #> [3,]  248   73  137   56 #> [4,]   13  180  116  205 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   18  175  111  210 #> [2,]  235   86  150   43 #> [3,]  231   90  154   39 #> [4,]   30  163   99  222 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   35  158   94  227 #> [2,]  218  103  167   26 #> [3,]  214  107  171   22 #> [4,]   47  146   82  239 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   52  141   77  244 #> [2,]  201  120  184    9 #> [3,]  197  124  188    5 #> [4,]   64  129   65  256 #>  #>  #> $`n-i+1,,i,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  189  125  196 #> [2,]  249   72  136   57 #> [3,]  245   76  140   53 #> [4,]   16  177  113  208 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   19  174  110  211 #> [2,]  234   87  151   42 #> [3,]  230   91  155   38 #> [4,]   31  162   98  223 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   34  159   95  226 #> [2,]  219  102  166   27 #> [3,]  215  106  170   23 #> [4,]   46  147   83  238 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  144   80  241 #> [2,]  204  117  181   12 #> [3,]  200  121  185    8 #> [4,]   61  132   68  253 #>  #>  #> $`,i,i,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  255   66  130   63 #> [3,]  254   67  131   62 #> [4,]    4  189  125  196 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   21  172  108  213 #> [2,]  235   86  150   43 #> [3,]  234   87  151   42 #> [4,]   24  169  105  216 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   41  152   88  233 #> [2,]  215  106  170   23 #> [3,]  214  107  171   22 #> [4,]   44  149   85  236 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   61  132   68  253 #> [2,]  195  126  190    3 #> [3,]  194  127  191    2 #> [4,]   64  129   65  256 #>  #>  #> $`i,i,i,` #>      [,1] [,2] [,3] [,4] #> [1,]    1  235  214   64 #> [2,]  192   86  107  129 #> [3,]  128  150  171   65 #> [4,]  193   43   22  256 #>  #> $`n-i+1,i,i,` #>      [,1] [,2] [,3] [,4] #> [1,]    4  234  215   61 #> [2,]  189   87  106  132 #> [3,]  125  151  170   68 #> [4,]  196   42   23  253 #>  #> $`,n-i+1,i,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  180  116  205 #> [2,]  243   78  142   51 #> [3,]  242   79  143   50 #> [4,]   16  177  113  208 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   25  168  104  217 #> [2,]  231   90  154   39 #> [3,]  230   91  155   38 #> [4,]   28  165  101  220 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   37  156   92  229 #> [2,]  219  102  166   27 #> [3,]  218  103  167   26 #> [4,]   40  153   89  232 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  144   80  241 #> [2,]  207  114  178   15 #> [3,]  206  115  179   14 #> [4,]   52  141   77  244 #>  #>  #> $`i,n-i+1,i,` #>      [,1] [,2] [,3] [,4] #> [1,]   13  231  218   52 #> [2,]  180   90  103  141 #> [3,]  116  154  167   77 #> [4,]  205   39   26  244 #>  #> $`n-i+1,n-i+1,i,` #>      [,1] [,2] [,3] [,4] #> [1,]   16  230  219   49 #> [2,]  177   91  102  144 #> [3,]  113  155  166   80 #> [4,]  208   38   27  241 #>  #> $`i,,n-i+1,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  144   80  241 #> [2,]  204  117  181   12 #> [3,]  200  121  185    8 #> [4,]   61  132   68  253 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   34  159   95  226 #> [2,]  219  102  166   27 #> [3,]  215  106  170   23 #> [4,]   46  147   83  238 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   19  174  110  211 #> [2,]  234   87  151   42 #> [3,]  230   91  155   38 #> [4,]   31  162   98  223 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  189  125  196 #> [2,]  249   72  136   57 #> [3,]  245   76  140   53 #> [4,]   16  177  113  208 #>  #>  #> $`n-i+1,,n-i+1,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   52  141   77  244 #> [2,]  201  120  184    9 #> [3,]  197  124  188    5 #> [4,]   64  129   65  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   35  158   94  227 #> [2,]  218  103  167   26 #> [3,]  214  107  171   22 #> [4,]   47  146   82  239 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   18  175  111  210 #> [2,]  235   86  150   43 #> [3,]  231   90  154   39 #> [4,]   30  163   99  222 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  252   69  133   60 #> [3,]  248   73  137   56 #> [4,]   13  180  116  205 #>  #>  #> $`,i,n-i+1,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  144   80  241 #> [2,]  207  114  178   15 #> [3,]  206  115  179   14 #> [4,]   52  141   77  244 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   37  156   92  229 #> [2,]  219  102  166   27 #> [3,]  218  103  167   26 #> [4,]   40  153   89  232 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   25  168  104  217 #> [2,]  231   90  154   39 #> [3,]  230   91  155   38 #> [4,]   28  165  101  220 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  180  116  205 #> [2,]  243   78  142   51 #> [3,]  242   79  143   50 #> [4,]   16  177  113  208 #>  #>  #> $`i,i,n-i+1,` #>      [,1] [,2] [,3] [,4] #> [1,]   49  219  230   16 #> [2,]  144  102   91  177 #> [3,]   80  166  155  113 #> [4,]  241   27   38  208 #>  #> $`n-i+1,i,n-i+1,` #>      [,1] [,2] [,3] [,4] #> [1,]   52  218  231   13 #> [2,]  141  103   90  180 #> [3,]   77  167  154  116 #> [4,]  244   26   39  205 #>  #> $`,n-i+1,n-i+1,` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   61  132   68  253 #> [2,]  195  126  190    3 #> [3,]  194  127  191    2 #> [4,]   64  129   65  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   41  152   88  233 #> [2,]  215  106  170   23 #> [3,]  214  107  171   22 #> [4,]   44  149   85  236 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   21  172  108  213 #> [2,]  235   86  150   43 #> [3,]  234   87  151   42 #> [4,]   24  169  105  216 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  192  128  193 #> [2,]  255   66  130   63 #> [3,]  254   67  131   62 #> [4,]    4  189  125  196 #>  #>  #> $`i,n-i+1,n-i+1,` #>      [,1] [,2] [,3] [,4] #> [1,]   61  215  234    4 #> [2,]  132  106   87  189 #> [3,]   68  170  151  125 #> [4,]  253   23   42  196 #>  #> $`n-i+1,n-i+1,n-i+1,` #>      [,1] [,2] [,3] [,4] #> [1,]   64  214  235    1 #> [2,]  129  107   86  192 #> [3,]   65  171  150  128 #> [4,]  256   22   43  193 #>  #> $`i,,,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  240  224   49 #> [2,]  252   21   37  204 #> [3,]  248   25   41  200 #> [4,]   13  228  212   61 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   66  175  159  114 #> [2,]  187   86  102  139 #> [3,]  183   90  106  135 #> [4,]   78  163  147  126 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  131  110   94  179 #> [2,]  122  151  167   74 #> [3,]  118  155  171   70 #> [4,]  143   98   82  191 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  196   45   29  244 #> [2,]   57  216  232    9 #> [3,]   53  220  236    5 #> [4,]  208   33   17  256 #>  #>  #> $`n-i+1,,,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  237  221   52 #> [2,]  249   24   40  201 #> [3,]  245   28   44  197 #> [4,]   16  225  209   64 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   67  174  158  115 #> [2,]  186   87  103  138 #> [3,]  182   91  107  134 #> [4,]   79  162  146  127 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  130  111   95  178 #> [2,]  123  150  166   75 #> [3,]  119  154  170   71 #> [4,]  142   99   83  190 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   48   32  241 #> [2,]   60  213  229   12 #> [3,]   56  217  233    8 #> [4,]  205   36   20  253 #>  #>  #> $`,i,,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  240  224   49 #> [2,]  255   18   34  207 #> [3,]  254   19   35  206 #> [4,]    4  237  221   52 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   69  172  156  117 #> [2,]  187   86  102  139 #> [3,]  186   87  103  138 #> [4,]   72  169  153  120 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  137  104   88  185 #> [2,]  119  154  170   71 #> [3,]  118  155  171   70 #> [4,]  140  101   85  188 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  205   36   20  253 #> [2,]   51  222  238    3 #> [3,]   50  223  239    2 #> [4,]  208   33   17  256 #>  #>  #> $`i,i,,i` #>      [,1] [,2] [,3] [,4] #> [1,]    1  187  118  208 #> [2,]  240   86  155   33 #> [3,]  224  102  171   17 #> [4,]   49  139   70  256 #>  #> $`n-i+1,i,,i` #>      [,1] [,2] [,3] [,4] #> [1,]    4  186  119  205 #> [2,]  237   87  154   36 #> [3,]  221  103  170   20 #> [4,]   52  138   71  253 #>  #> $`,n-i+1,,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  228  212   61 #> [2,]  243   30   46  195 #> [3,]  242   31   47  194 #> [4,]   16  225  209   64 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   73  168  152  121 #> [2,]  183   90  106  135 #> [3,]  182   91  107  134 #> [4,]   76  165  149  124 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  133  108   92  181 #> [2,]  123  150  166   75 #> [3,]  122  151  167   74 #> [4,]  136  105   89  184 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   48   32  241 #> [2,]   63  210  226   15 #> [3,]   62  211  227   14 #> [4,]  196   45   29  244 #>  #>  #> $`i,n-i+1,,i` #>      [,1] [,2] [,3] [,4] #> [1,]   13  183  122  196 #> [2,]  228   90  151   45 #> [3,]  212  106  167   29 #> [4,]   61  135   74  244 #>  #> $`n-i+1,n-i+1,,i` #>      [,1] [,2] [,3] [,4] #> [1,]   16  182  123  193 #> [2,]  225   91  150   48 #> [3,]  209  107  166   32 #> [4,]   64  134   75  241 #>  #> $`,,i,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  252  248   13 #> [2,]  255    6   10  243 #> [3,]  254    7   11  242 #> [4,]    4  249  245   16 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   81  172  168   93 #> [2,]  175   86   90  163 #> [3,]  174   87   91  162 #> [4,]   84  169  165   96 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  161   92   88  173 #> [2,]   95  166  170   83 #> [3,]   94  167  171   82 #> [4,]  164   89   85  176 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  241   12    8  253 #> [2,]   15  246  250    3 #> [3,]   14  247  251    2 #> [4,]  244    9    5  256 #>  #>  #> $`i,,i,i` #>      [,1] [,2] [,3] [,4] #> [1,]    1  175   94  244 #> [2,]  252   86  167    9 #> [3,]  248   90  171    5 #> [4,]   13  163   82  256 #>  #> $`n-i+1,,i,i` #>      [,1] [,2] [,3] [,4] #> [1,]    4  174   95  241 #> [2,]  249   87  166   12 #> [3,]  245   91  170    8 #> [4,]   16  162   83  253 #>  #> $`,i,i,i` #>      [,1] [,2] [,3] [,4] #> [1,]    1  172   88  253 #> [2,]  255   86  170    3 #> [3,]  254   87  171    2 #> [4,]    4  169   85  256 #>  #> $`i,i,i,i` #> [1]   1  86 171 256 #>  #> $`n-i+1,i,i,i` #> [1]   4  87 170 253 #>  #> $`,n-i+1,i,i` #>      [,1] [,2] [,3] [,4] #> [1,]   13  168   92  241 #> [2,]  243   90  166   15 #> [3,]  242   91  167   14 #> [4,]   16  165   89  244 #>  #> $`i,n-i+1,i,i` #> [1]  13  90 167 244 #>  #> $`n-i+1,n-i+1,i,i` #> [1]  16  91 166 241 #>  #> $`,,n-i+1,i` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  204  200   61 #> [2,]  207   54   58  195 #> [3,]  206   55   59  194 #> [4,]   52  201  197   64 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   97  156  152  109 #> [2,]  159  102  106  147 #> [3,]  158  103  107  146 #> [4,]  100  153  149  112 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  145  108  104  157 #> [2,]  111  150  154   99 #> [3,]  110  151  155   98 #> [4,]  148  105  101  160 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   60   56  205 #> [2,]   63  198  202   51 #> [3,]   62  199  203   50 #> [4,]  196   57   53  208 #>  #>  #> $`i,,n-i+1,i` #>      [,1] [,2] [,3] [,4] #> [1,]   49  159  110  196 #> [2,]  204  102  151   57 #> [3,]  200  106  155   53 #> [4,]   61  147   98  208 #>  #> $`n-i+1,,n-i+1,i` #>      [,1] [,2] [,3] [,4] #> [1,]   52  158  111  193 #> [2,]  201  103  150   60 #> [3,]  197  107  154   56 #> [4,]   64  146   99  205 #>  #> $`,i,n-i+1,i` #>      [,1] [,2] [,3] [,4] #> [1,]   49  156  104  205 #> [2,]  207  102  154   51 #> [3,]  206  103  155   50 #> [4,]   52  153  101  208 #>  #> $`i,i,n-i+1,i` #> [1]  49 102 155 208 #>  #> $`n-i+1,i,n-i+1,i` #> [1]  52 103 154 205 #>  #> $`,n-i+1,n-i+1,i` #>      [,1] [,2] [,3] [,4] #> [1,]   61  152  108  193 #> [2,]  195  106  150   63 #> [3,]  194  107  151   62 #> [4,]   64  149  105  196 #>  #> $`i,n-i+1,n-i+1,i` #> [1]  61 106 151 196 #>  #> $`n-i+1,n-i+1,n-i+1,i` #> [1]  64 107 150 193 #>  #> $`i,,,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   48   32  241 #> [2,]   60  213  229   12 #> [3,]   56  217  233    8 #> [4,]  205   36   20  253 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  130  111   95  178 #> [2,]  123  150  166   75 #> [3,]  119  154  170   71 #> [4,]  142   99   83  190 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   67  174  158  115 #> [2,]  186   87  103  138 #> [3,]  182   91  107  134 #> [4,]   79  162  146  127 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  237  221   52 #> [2,]  249   24   40  201 #> [3,]  245   28   44  197 #> [4,]   16  225  209   64 #>  #>  #> $`n-i+1,,,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  196   45   29  244 #> [2,]   57  216  232    9 #> [3,]   53  220  236    5 #> [4,]  208   33   17  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  131  110   94  179 #> [2,]  122  151  167   74 #> [3,]  118  155  171   70 #> [4,]  143   98   82  191 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   66  175  159  114 #> [2,]  187   86  102  139 #> [3,]  183   90  106  135 #> [4,]   78  163  147  126 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  240  224   49 #> [2,]  252   21   37  204 #> [3,]  248   25   41  200 #> [4,]   13  228  212   61 #>  #>  #> $`,i,,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   48   32  241 #> [2,]   63  210  226   15 #> [3,]   62  211  227   14 #> [4,]  196   45   29  244 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  133  108   92  181 #> [2,]  123  150  166   75 #> [3,]  122  151  167   74 #> [4,]  136  105   89  184 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   73  168  152  121 #> [2,]  183   90  106  135 #> [3,]  182   91  107  134 #> [4,]   76  165  149  124 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13  228  212   61 #> [2,]  243   30   46  195 #> [3,]  242   31   47  194 #> [4,]   16  225  209   64 #>  #>  #> $`i,i,,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  193  123  182   16 #> [2,]   48  150   91  225 #> [3,]   32  166  107  209 #> [4,]  241   75  134   64 #>  #> $`n-i+1,i,,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  196  122  183   13 #> [2,]   45  151   90  228 #> [3,]   29  167  106  212 #> [4,]  244   74  135   61 #>  #> $`,n-i+1,,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  205   36   20  253 #> [2,]   51  222  238    3 #> [3,]   50  223  239    2 #> [4,]  208   33   17  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  137  104   88  185 #> [2,]  119  154  170   71 #> [3,]  118  155  171   70 #> [4,]  140  101   85  188 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   69  172  156  117 #> [2,]  187   86  102  139 #> [3,]  186   87  103  138 #> [4,]   72  169  153  120 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  240  224   49 #> [2,]  255   18   34  207 #> [3,]  254   19   35  206 #> [4,]    4  237  221   52 #>  #>  #> $`i,n-i+1,,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  205  119  186    4 #> [2,]   36  154   87  237 #> [3,]   20  170  103  221 #> [4,]  253   71  138   52 #>  #> $`n-i+1,n-i+1,,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  208  118  187    1 #> [2,]   33  155   86  240 #> [3,]   17  171  102  224 #> [4,]  256   70  139   49 #>  #> $`,,i,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   60   56  205 #> [2,]   63  198  202   51 #> [3,]   62  199  203   50 #> [4,]  196   57   53  208 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  145  108  104  157 #> [2,]  111  150  154   99 #> [3,]  110  151  155   98 #> [4,]  148  105  101  160 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   97  156  152  109 #> [2,]  159  102  106  147 #> [3,]  158  103  107  146 #> [4,]  100  153  149  112 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  204  200   61 #> [2,]  207   54   58  195 #> [3,]  206   55   59  194 #> [4,]   52  201  197   64 #>  #>  #> $`i,,i,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  193  111  158   52 #> [2,]   60  150  103  201 #> [3,]   56  154  107  197 #> [4,]  205   99  146   64 #>  #> $`n-i+1,,i,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  196  110  159   49 #> [2,]   57  151  102  204 #> [3,]   53  155  106  200 #> [4,]  208   98  147   61 #>  #> $`,i,i,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  193  108  152   61 #> [2,]   63  150  106  195 #> [3,]   62  151  107  194 #> [4,]  196  105  149   64 #>  #> $`i,i,i,n-i+1` #> [1] 193 150 107  64 #>  #> $`n-i+1,i,i,n-i+1` #> [1] 196 151 106  61 #>  #> $`,n-i+1,i,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  205  104  156   49 #> [2,]   51  154  102  207 #> [3,]   50  155  103  206 #> [4,]  208  101  153   52 #>  #> $`i,n-i+1,i,n-i+1` #> [1] 205 154 103  52 #>  #> $`n-i+1,n-i+1,i,n-i+1` #> [1] 208 155 102  49 #>  #> $`,,n-i+1,n-i+1` #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  241   12    8  253 #> [2,]   15  246  250    3 #> [3,]   14  247  251    2 #> [4,]  244    9    5  256 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  161   92   88  173 #> [2,]   95  166  170   83 #> [3,]   94  167  171   82 #> [4,]  164   89   85  176 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   81  172  168   93 #> [2,]  175   86   90  163 #> [3,]  174   87   91  162 #> [4,]   84  169  165   96 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  252  248   13 #> [2,]  255    6   10  243 #> [3,]  254    7   11  242 #> [4,]    4  249  245   16 #>  #>  #> $`i,,n-i+1,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  241   95  174    4 #> [2,]   12  166   87  249 #> [3,]    8  170   91  245 #> [4,]  253   83  162   16 #>  #> $`n-i+1,,n-i+1,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  244   94  175    1 #> [2,]    9  167   86  252 #> [3,]    5  171   90  248 #> [4,]  256   82  163   13 #>  #> $`,i,n-i+1,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  241   92  168   13 #> [2,]   15  166   90  243 #> [3,]   14  167   91  242 #> [4,]  244   89  165   16 #>  #> $`i,i,n-i+1,n-i+1` #> [1] 241 166  91  16 #>  #> $`n-i+1,i,n-i+1,n-i+1` #> [1] 244 167  90  13 #>  #> $`,n-i+1,n-i+1,n-i+1` #>      [,1] [,2] [,3] [,4] #> [1,]  253   88  172    1 #> [2,]    3  170   86  255 #> [3,]    2  171   87  254 #> [4,]  256   85  169    4 #>  #> $`i,n-i+1,n-i+1,n-i+1` #> [1] 253 170  87   4 #>  #> $`n-i+1,n-i+1,n-i+1,n-i+1` #> [1] 256 171  86   1 #>"},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":null,"dir":"Reference","previous_headings":"","what":"Row, column, and two diagonal sums of arrays — allsums","title":"Row, column, and two diagonal sums of arrays — allsums","text":"Returns rowsums, columnsums, (broken) diagonal sums   putative magic square.","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row, column, and two diagonal sums of arrays — allsums","text":"","code":"allsums(m,func=NULL, ...)"},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row, column, and two diagonal sums of arrays — allsums","text":"m square tested func Function, default NULL interpreted     assum(), applied square rowwise, columnwise,     diagonalwise ... arguments passed func()","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row, column, and two diagonal sums of arrays — allsums","text":"Returns list four elements.  following, “sums”   means “result applying func()”. rowsums \\(n\\) row sums colsums \\(n\\) column sums majors \\(n\\) broken major diagonals (northwest-southeast).     First element long (unbroken) major diagonal, tested     .magic() minors \\(n\\) broken minor diagonals (northeast-southwest).     First element long (unbroken) minor diagonal.","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Row, column, and two diagonal sums of arrays — allsums","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Row, column, and two diagonal sums of arrays — allsums","text":"func() returns vector, allsums() returns   list whose columns result applying func().  See third   fourth examples . Used .magic() et seq. major minor diagonals benefit recoded C.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/allsums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row, column, and two diagonal sums of arrays — allsums","text":"","code":"allsums(magic(7)) #> $rowsums #> [1] 175 175 175 175 175 175 175 #>  #> $colsums #> [1] 175 175 175 175 175 175 175 #>  #> $majors #> [1] 175 175 175 175 175 175 175 #>  #> $minors #> [1] 175 126  77  28 322 273 224 #>  allsums(magic(7),func=max) #> $rowsums #> [1] 49 43 44 45 46 47 48 #>  #> $colsums #> [1] 45 44 43 49 48 47 46 #>  #> $majors #> [1] 47 43 46 49 45 48 44 #>  #> $minors #> [1] 28 21 14  7 49 42 35 #>   allsums(magic(7),func=range) #> $rowsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    2    3    4    5    6    7    1 #> [2,]   49   43   44   45   46   47   48 #>  #> $colsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    4    3    2    1    7    6    5 #> [2,]   45   44   43   49   48   47   46 #>  #> $majors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    3    6    2    5    1    4    7 #> [2,]   47   43   46   49   45   48   44 #>  #> $minors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   22   15    8    1   43   36   29 #> [2,]   28   21   14    7   49   42   35 #>  allsums(magic(7),func=function(x){x[1:2]}) #> $rowsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   20   12    4   45   37   29   28 #> [2,]   11    3   44   36   35   27   19 #>  #> $colsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   20   11    2   49   40   31   22 #> [2,]   12    3   43   41   32   23   21 #>  #> $majors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   20   11    2   49   40   31   22 #> [2,]    3   43   41   32   23   21   12 #>  #> $minors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   22   20   11    2   49   40   31 #> [2,]   23   21   12    3   43   41   32 #>    allsums(magic(7),sort) #> $rowsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    2    3    4    5    6    7    1 #> [2,]   11   12   13   14    8    9   10 #> [3,]   20   21   15   16   17   18   19 #> [4,]   22   23   24   25   26   27   28 #> [5,]   31   32   33   34   35   29   30 #> [6,]   40   41   42   36   37   38   39 #> [7,]   49   43   44   45   46   47   48 #>  #> $colsums #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    4    3    2    1    7    6    5 #> [2,]   12   11   10    9    8   14   13 #> [3,]   20   19   18   17   16   15   21 #> [4,]   28   27   26   25   24   23   22 #> [5,]   29   35   34   33   32   31   30 #> [6,]   37   36   42   41   40   39   38 #> [7,]   45   44   43   49   48   47   46 #>  #> $majors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    3    6    2    5    1    4    7 #> [2,]    8   11   14   10   13    9   12 #> [3,]   20   16   19   15   18   21   17 #> [4,]   25   28   24   27   23   26   22 #> [5,]   30   33   29   32   35   31   34 #> [6,]   42   38   41   37   40   36   39 #> [7,]   47   43   46   49   45   48   44 #>  #> $minors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   22   15    8    1   43   36   29 #> [2,]   23   16    9    2   44   37   30 #> [3,]   24   17   10    3   45   38   31 #> [4,]   25   18   11    4   46   39   32 #> [5,]   26   19   12    5   47   40   33 #> [6,]   27   20   13    6   48   41   34 #> [7,]   28   21   14    7   49   42   35 #>    # beware! compare apply(magic(7),1,sort) and apply(magic(7),2,sort)"},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad arrays — apad","title":"Pad arrays — apad","text":"Generalized padding arrays arbitrary dimension","code":""},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad arrays — apad","text":"","code":"apad(a, l, e = NULL, method = \"ext\", post = TRUE)"},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad arrays — apad","text":"Array padded l Amount padding add.  vector length greater     one, interpreted     extra extent along dimensions (standard     recycling used).  length one, interpret dimension     padded, case amount given argument l. e l length one,  amount padding add     dimension l method String specifying values padded elements.  See     details section. post Boolean, default TRUE meaning append       FALSE meaning prepend.","code":""},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pad arrays — apad","text":"Argument method specifies values padded elements.     can either “ext”,     “mirror”, “rep”. Specifying ext (default) uses padding value given     “nearest” element , measured     Manhattan metric. Specifying mirror fills array alternate mirror     images ; rep  fills unreflected copies     .","code":""},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pad arrays — apad","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pad arrays — apad","text":"Function apad() work arrays dimensions   zero extent: pad ?  pad particular value, use   adiag(). function works expected vectors, treated   one-dimensional arrays.  See examples section. Function apad() distinct adiag(), takes   two arrays binds together.  functions create array   dimensionality array arguments possibly   larger extents.  However, functions differ values   new array elements. Function adiag() uses second array;   function apad() takes values primary array argument.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/apad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad arrays — apad","text":"","code":"apad(1:10,4,method=\"mirror\") #>  [1]  1  2  3  4  5  6  7  8  9 10 10  9  8  7   a <- matrix(1:30,5,6)  apad(a,c(4,4)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    6   11   16   21   26   26   26   26    26 #>  [2,]    2    7   12   17   22   27   27   27   27    27 #>  [3,]    3    8   13   18   23   28   28   28   28    28 #>  [4,]    4    9   14   19   24   29   29   29   29    29 #>  [5,]    5   10   15   20   25   30   30   30   30    30 #>  [6,]    5   10   15   20   25   30   30   30   30    30 #>  [7,]    5   10   15   20   25   30   30   30   30    30 #>  [8,]    5   10   15   20   25   30   30   30   30    30 #>  [9,]    5   10   15   20   25   30   30   30   30    30 apad(a,c(4,4),post=FALSE) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    1    1    1    1    6   11   16   21    26 #>  [2,]    1    1    1    1    1    6   11   16   21    26 #>  [3,]    1    1    1    1    1    6   11   16   21    26 #>  [4,]    1    1    1    1    1    6   11   16   21    26 #>  [5,]    1    1    1    1    1    6   11   16   21    26 #>  [6,]    2    2    2    2    2    7   12   17   22    27 #>  [7,]    3    3    3    3    3    8   13   18   23    28 #>  [8,]    4    4    4    4    4    9   14   19   24    29 #>  [9,]    5    5    5    5    5   10   15   20   25    30  apad(a,1,5) #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]    1    6   11   16   21   26 #>  [2,]    2    7   12   17   22   27 #>  [3,]    3    8   13   18   23   28 #>  [4,]    4    9   14   19   24   29 #>  [5,]    5   10   15   20   25   30 #>  [6,]    5   10   15   20   25   30 #>  [7,]    5   10   15   20   25   30 #>  [8,]    5   10   15   20   25   30 #>  [9,]    5   10   15   20   25   30 #> [10,]    5   10   15   20   25   30  apad(a,c(5,6),method=\"mirror\") #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1    6   11   16   21   26   26   21   16    11     6     1 #>  [2,]    2    7   12   17   22   27   27   22   17    12     7     2 #>  [3,]    3    8   13   18   23   28   28   23   18    13     8     3 #>  [4,]    4    9   14   19   24   29   29   24   19    14     9     4 #>  [5,]    5   10   15   20   25   30   30   25   20    15    10     5 #>  [6,]    5   10   15   20   25   30   30   25   20    15    10     5 #>  [7,]    4    9   14   19   24   29   29   24   19    14     9     4 #>  [8,]    3    8   13   18   23   28   28   23   18    13     8     3 #>  [9,]    2    7   12   17   22   27   27   22   17    12     7     2 #> [10,]    1    6   11   16   21   26   26   21   16    11     6     1 apad(a,c(5,6),method=\"mirror\",post=FALSE) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]   30   25   20   15   10    5    5   10   15    20    25    30 #>  [2,]   29   24   19   14    9    4    4    9   14    19    24    29 #>  [3,]   28   23   18   13    8    3    3    8   13    18    23    28 #>  [4,]   27   22   17   12    7    2    2    7   12    17    22    27 #>  [5,]   26   21   16   11    6    1    1    6   11    16    21    26 #>  [6,]   26   21   16   11    6    1    1    6   11    16    21    26 #>  [7,]   27   22   17   12    7    2    2    7   12    17    22    27 #>  [8,]   28   23   18   13    8    3    3    8   13    18    23    28 #>  [9,]   29   24   19   14    9    4    4    9   14    19    24    29 #> [10,]   30   25   20   15   10    5    5   10   15    20    25    30"},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":null,"dir":"Reference","previous_headings":"","what":"Replacements for APL functions take and drop — apl","title":"Replacements for APL functions take and drop — apl","text":"Replacements APL functions take drop","code":""},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replacements for APL functions take and drop — apl","text":"","code":"apldrop(a, b, give.indices=FALSE) apldrop(a, b) <- value apltake(a, b, give.indices=FALSE) apltake(a, b) <- value"},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replacements for APL functions take and drop — apl","text":"Array b Vector number indices take/drop.  Length b     exceed length(dim()); , error     returned give.indices Boolean, default FALSE meaning     return appropriate subset array , TRUE     meaning return list selected elements     dimensions.  Setting TRUE really intended     end-user, used code apltake<-()     apldrop<-() value elements replace","code":""},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replacements for APL functions take and drop — apl","text":"apltake(,b) returns array dimensionality   .  Along dimension , b[]>0, first   b[] elements retained; b[]<0, last   b[] elements retained. apldrop(,b) returns array dimensionality   .  Along dimension , b[]>0, first   b[] elements dropped b[]<0, last   b[] elements dropped. functions drop singleton dimensions.  Use drop()   desired.","code":""},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replacements for APL functions take and drop — apl","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/apl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replacements for APL functions take and drop — apl","text":"","code":"a <- magichypercube.4n(m=1) apltake(a,c(2,3,2)) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]   64    5    9 #> [2,]    2   59   55 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]   17   44   40 #> [2,]   47   22   26 #>  apldrop(a,c(1,1,2)) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]   38   42   19 #> [2,]   39   43   18 #> [3,]   25   21   48 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]   11    7   62 #> [2,]   10    6   63 #> [3,]   56   60    1 #>   b <- matrix(1:30,5,6) apldrop(b,c(1,-2)) <- -1  b <- matrix(1:110,10,11) apltake(b,2) <- -1 apldrop(b,c(5,-7)) <- -2 b #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] #>  [1,]   -1   -1   -1   -1   -1   -1   -1   -1   -1    -1    -1 #>  [2,]   -1   -1   -1   -1   -1   -1   -1   -1   -1    -1    -1 #>  [3,]    3   13   23   33   43   53   63   73   83    93   103 #>  [4,]    4   14   24   34   44   54   64   74   84    94   104 #>  [5,]    5   15   25   35   45   55   65   75   85    95   105 #>  [6,]   -2   -2   -2   -2   46   56   66   76   86    96   106 #>  [7,]   -2   -2   -2   -2   47   57   67   77   87    97   107 #>  [8,]   -2   -2   -2   -2   48   58   68   78   88    98   108 #>  [9,]   -2   -2   -2   -2   49   59   69   79   89    99   109 #> [10,]   -2   -2   -2   -2   50   60   70   80   90   100   110"},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized array addition — aplus","title":"Generalized array addition — aplus","text":"Given two arrays b   length(dim())==length(dim(b)), return matrix   dimensions pmax(dim(),dim(b)) “overlap”   elements +b, elements either 0, ,   b according location.  See details section.","code":""},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized array addition — aplus","text":"","code":"aplus(...)"},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized array addition — aplus","text":"... numeric complex arrays","code":""},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized array addition — aplus","text":"function takes number arguments (binary operation   associative). operation aplus() understandable examining   following pseudocode:  outa <- array(0,pmax(,b)) outb <- array(0,pmax(,b)) outa[1:dim()] <- outb[1:dim()] <- b return(outa+outb) See outa outb correct size   appropriate elements populated b   respectively.  sum returned.","code":""},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized array addition — aplus","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/aplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized array addition — aplus","text":"","code":"aplus(rbind(1:9),cbind(1:9)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    2    2    3    4    5    6    7    8    9 #>  [2,]    2    0    0    0    0    0    0    0    0 #>  [3,]    3    0    0    0    0    0    0    0    0 #>  [4,]    4    0    0    0    0    0    0    0    0 #>  [5,]    5    0    0    0    0    0    0    0    0 #>  [6,]    6    0    0    0    0    0    0    0    0 #>  [7,]    7    0    0    0    0    0    0    0    0 #>  [8,]    8    0    0    0    0    0    0    0    0 #>  [9,]    9    0    0    0    0    0    0    0    0  a <- matrix(1:8,2,4) b <- matrix(1:10,5,2) aplus(a*100,b,b) #>      [,1] [,2] [,3] [,4] #> [1,]  102  312  500  700 #> [2,]  204  414  600  800 #> [3,]    6   16    0    0 #> [4,]    8   18    0    0 #> [5,]   10   20    0    0"},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverses some dimensions; a generalization of rev — arev","title":"Reverses some dimensions; a generalization of rev — arev","text":"multidimensional generalization rev(): given array , Boolean vector swap, return array shape dimensions corresponding TRUE elements swap reversed.  swap Boolean, interpreted dimensions along swap.","code":""},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverses some dimensions; a generalization of rev — arev","text":"","code":"arev(a, swap = TRUE)"},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverses some dimensions; a generalization of rev — arev","text":"Array reversed swap Vector Boolean variables.  swap[]     TRUE, dimension array reversed.     swap length one, recycle length(dim())","code":""},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverses some dimensions; a generalization of rev — arev","text":"swap Boolean, equivalent 1:n %%   swap (n number dimensions).  Thus multiple   entries ignored, entries greater n. vector, rev() returned. Function arev() handles zero-extent dimensions expected. Function arev() treat singleton dimensions specially,   thus different Octave's flipdim(), (  supplied second argument) flips first nonsingleton   dimension.  reproduce , use arev(,fnsd()).","code":""},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reverses some dimensions; a generalization of rev — arev","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/arev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverses some dimensions; a generalization of rev — arev","text":"","code":"a <- matrix(1:42,6,7) arev(a)  #Note swap defaults to TRUE #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   42   36   30   24   18   12    6 #> [2,]   41   35   29   23   17   11    5 #> [3,]   40   34   28   22   16   10    4 #> [4,]   39   33   27   21   15    9    3 #> [5,]   38   32   26   20   14    8    2 #> [6,]   37   31   25   19   13    7    1  b <- magichypercube.4n(1,d=4) arev(b,c(TRUE,FALSE,TRUE,FALSE)) #> , , 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   52  201  197   64 #> [2,]  206   55   59  194 #> [3,]  207   54   58  195 #> [4,]   49  204  200   61 #>  #> , , 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  221   40   44  209 #> [2,]   35  218  214   47 #> [3,]   34  219  215   46 #> [4,]  224   37   41  212 #>  #> , , 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  237   24   28  225 #> [2,]   19  234  230   31 #> [3,]   18  235  231   30 #> [4,]  240   21   25  228 #>  #> , , 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4  249  245   16 #> [2,]  254    7   11  242 #> [3,]  255    6   10  243 #> [4,]    1  252  248   13 #>  #> , , 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  141  120  124  129 #> [2,]  115  138  134  127 #> [3,]  114  139  135  126 #> [4,]  144  117  121  132 #>  #> , , 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  100  153  149  112 #> [2,]  158  103  107  146 #> [3,]  159  102  106  147 #> [4,]   97  156  152  109 #>  #> , , 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   84  169  165   96 #> [2,]  174   87   91  162 #> [3,]  175   86   90  163 #> [4,]   81  172  168   93 #>  #> , , 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  189   72   76  177 #> [2,]   67  186  182   79 #> [3,]   66  187  183   78 #> [4,]  192   69   73  180 #>  #> , , 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   77  184  188   65 #> [2,]  179   74   70  191 #> [3,]  178   75   71  190 #> [4,]   80  181  185   68 #>  #> , , 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  164   89   85  176 #> [2,]   94  167  171   82 #> [3,]   95  166  170   83 #> [4,]  161   92   88  173 #>  #> , , 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  148  105  101  160 #> [2,]  110  151  155   98 #> [3,]  111  150  154   99 #> [4,]  145  108  104  157 #>  #> , , 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  125  136  140  113 #> [2,]  131  122  118  143 #> [3,]  130  123  119  142 #> [4,]  128  133  137  116 #>  #> , , 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  244    9    5  256 #> [2,]   14  247  251    2 #> [3,]   15  246  250    3 #> [4,]  241   12    8  253 #>  #> , , 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   29  232  236   17 #> [2,]  227   26   22  239 #> [3,]  226   27   23  238 #> [4,]   32  229  233   20 #>  #> , , 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   45  216  220   33 #> [2,]  211   42   38  223 #> [3,]  210   43   39  222 #> [4,]   48  213  217   36 #>  #> , , 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  196   57   53  208 #> [2,]   62  199  203   50 #> [3,]   63  198  202   51 #> [4,]  193   60   56  205 #>"},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotates an array about two specified dimensions — arot","title":"Rotates an array about two specified dimensions — arot","text":"Rotates array two specified dimensions number 90 degree turns","code":""},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotates an array about two specified dimensions — arot","text":"","code":"arot(a, rights = 1,pair=1:2)"},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotates an array about two specified dimensions — arot","text":"array rotated rights Integer; number right angles turn pair two-element vector containing dimensions rotate     default meaning rotate first two dimensions","code":""},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rotates an array about two specified dimensions — arot","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rotates an array about two specified dimensions — arot","text":"Function arot() exactly equivalent octave's   rotdim(); arot() order elements   pair matters rotation clockwise viewed   (pair[1],pair[2]) direction.  Compare octave's   rotdim() pair replaced   sort(pair). Note also rotation first two dimensions   specified pair pair two elements   dimensions also permuted. Also note function arot() treat singleton   dimensions specially.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/arot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotates an array about two specified dimensions — arot","text":"","code":"a <- array(1:16,rep(2,4)) arot(a) #> , , 1, 1 #>  #>      [,1] [,2] #> [1,]    3    4 #> [2,]    1    2 #>  #> , , 2, 1 #>  #>      [,1] [,2] #> [1,]    7    8 #> [2,]    5    6 #>  #> , , 1, 2 #>  #>      [,1] [,2] #> [1,]   11   12 #> [2,]    9   10 #>  #> , , 2, 2 #>  #>      [,1] [,2] #> [1,]   15   16 #> [2,]   13   14 #>"},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized row and col — arow","title":"Generalized row and col — arow","text":"Given array, returns array size whose elements sequentially numbered along \\(^{\\rm th}\\) dimension.","code":""},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized row and col — arow","text":"","code":"arow(a, i)"},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized row and col — arow","text":"array converted Number dimension","code":""},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized row and col — arow","text":"integer matrix dimensions , element \\(\\left(n_1,n_2,\\ldots n_d\\right)\\) \\(n_i\\).","code":""},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized row and col — arow","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generalized row and col — arow","text":"function equivalent , faster , function(,){.index(,function(x){x[]})}.  However, much complicated. function nominally slice.index() checked edge cases.","code":""},{"path":"https://robinhankin.github.io/magic/reference/arow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized row and col — arow","text":"","code":"a <- array(0,c(3,3,2,2)) arow(a,2) #> , , 1, 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #> [3,]    1    2    3 #>  #> , , 2, 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #> [3,]    1    2    3 #>  #> , , 1, 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #> [3,]    1    2    3 #>  #> , , 2, 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #> [3,]    1    2    3 #>  (arow(a,1)+arow(a,2)+arow(a,3)+arow(a,4))%%2 #> , , 1, 1 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    1 #> [3,]    0    1    0 #>  #> , , 2, 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    1 #> [2,]    0    1    0 #> [3,]    1    0    1 #>  #> , , 1, 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    1 #> [2,]    0    1    0 #> [3,]    1    0    1 #>  #> , , 2, 2 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    1 #> [3,]    0    1    0 #>"},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard form for magic squares — as.standard","title":"Standard form for magic squares — as.standard","text":"Transforms magic square magic hypercube   Frenicle's standard form","code":""},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard form for magic squares — as.standard","text":"","code":"as.standard(a, toroidal = FALSE, one_minus = FALSE) is.standard(a, toroidal = FALSE, one_minus = FALSE)"},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard form for magic squares — as.standard","text":"Magic square hypercube (array) tested     transformed toroidal Boolean, default FALSE meaning use     Frenicle's method, TRUE meaning use additional     transformations appropriate toroidal connectivity one_minus Boolean,  TRUE meaning use     transformation \\(x\\longrightarrow n^2+1-x\\)     appropriate,     default FALSE meaning use ","code":""},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard form for magic squares — as.standard","text":"square, .standard() transforms magic square Frenicle's standard form.  four numbers four corners determined.  First, square rotated smallest four upper left.  , element [1,2] compared element[2,1] , larger, transpose taken. Thus eight rotated transposed versions magic square standard form. square returned magic() standard form. hypercubes, algorithm generalized.  First, hypercube reflected [1,1,...,1,1] smallest \\(2^d\\) corner elements (eg [1,n,1,...,1,1]). Next, aperm() called [1,1,...,1,2] < [1,1,...,2,1] < ... < [2,1,...,1,1]. Note inequalities strict hypercubes assumed normal.  version 1.3-1, .standard() accept arrays dimension (ie arrays minmax(dim())==FALSE handled sensibly). array dimension extent zero standard form definition; dimensions length one dropped. argument toroidal TRUE, array translated using ashift() [1,1,...,1] == min(). translations preserve properties semimagicness pandiagonalness (magicness associativity). easier (least) visualise considering two-dimensional arrays, tiling plane copies . Next, array shifted [2,1,1,...,1] <   [dim()[1],1,1,...,1] [1,2,1,..,1] <   [1,dim()[2],1,...,1] . aperm() called per non-toroidal case . .standard() returns TRUE magic square hypercube standard form.  .standard() .standard() check neither magicness normality (use .magic .normal ).","code":""},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Standard form for magic squares — as.standard","text":"appear way make third letter   “Frenicle” acute accent, .","code":""},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standard form for magic squares — as.standard","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/as.standard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard form for magic squares — as.standard","text":"","code":"is.standard(magic.2np1(4)) #> [1] FALSE as.standard(magic.4n(3)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1  132  120   37   49   84   72   85   97    36    24   133 #>  [2,]  143   14   26  107   95   62   74   59   47   110   122    11 #>  [3,]  142   15   27  106   94   63   75   58   46   111   123    10 #>  [4,]    4  129  117   40   52   81   69   88  100    33    21   136 #>  [5,]    5  128  116   41   53   80   68   89  101    32    20   137 #>  [6,]  139   18   30  103   91   66   78   55   43   114   126     7 #>  [7,]  138   19   31  102   90   67   79   54   42   115   127     6 #>  [8,]    8  125  113   44   56   77   65   92  104    29    17   140 #>  [9,]    9  124  112   45   57   76   64   93  105    28    16   141 #> [10,]  135   22   34   99   87   70   82   51   39   118   130     3 #> [11,]  134   23   35   98   86   71   83   50   38   119   131     2 #> [12,]   12  121  109   48   60   73   61   96  108    25    13   144  as.standard(magichypercube.4n(1,5)) #> , , 1, 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1 1020 1016   13 #> [2,] 1023    6   10 1011 #> [3,] 1022    7   11 1010 #> [4,]    4 1017 1013   16 #>  #> , , 2, 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,] 1008   21   25  996 #> [2,]   18 1003  999   30 #> [3,]   19 1002  998   31 #> [4,] 1005   24   28  993 #>  #> , , 3, 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  992   37   41  980 #> [2,]   34  987  983   46 #> [3,]   35  986  982   47 #> [4,]  989   40   44  977 #>  #> , , 4, 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  972  968   61 #> [2,]  975   54   58  963 #> [3,]  974   55   59  962 #> [4,]   52  969  965   64 #>  #> , , 1, 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  960   69   73  948 #> [2,]   66  955  951   78 #> [3,]   67  954  950   79 #> [4,]  957   72   76  945 #>  #> , , 2, 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   81  940  936   93 #> [2,]  943   86   90  931 #> [3,]  942   87   91  930 #> [4,]   84  937  933   96 #>  #> , , 3, 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   97  924  920  109 #> [2,]  927  102  106  915 #> [3,]  926  103  107  914 #> [4,]  100  921  917  112 #>  #> , , 4, 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  912  117  121  900 #> [2,]  114  907  903  126 #> [3,]  115  906  902  127 #> [4,]  909  120  124  897 #>  #> , , 1, 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  896  133  137  884 #> [2,]  130  891  887  142 #> [3,]  131  890  886  143 #> [4,]  893  136  140  881 #>  #> , , 2, 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  145  876  872  157 #> [2,]  879  150  154  867 #> [3,]  878  151  155  866 #> [4,]  148  873  869  160 #>  #> , , 3, 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  161  860  856  173 #> [2,]  863  166  170  851 #> [3,]  862  167  171  850 #> [4,]  164  857  853  176 #>  #> , , 4, 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  848  181  185  836 #> [2,]  178  843  839  190 #> [3,]  179  842  838  191 #> [4,]  845  184  188  833 #>  #> , , 1, 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193  828  824  205 #> [2,]  831  198  202  819 #> [3,]  830  199  203  818 #> [4,]  196  825  821  208 #>  #> , , 2, 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  816  213  217  804 #> [2,]  210  811  807  222 #> [3,]  211  810  806  223 #> [4,]  813  216  220  801 #>  #> , , 3, 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  800  229  233  788 #> [2,]  226  795  791  238 #> [3,]  227  794  790  239 #> [4,]  797  232  236  785 #>  #> , , 4, 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  241  780  776  253 #> [2,]  783  246  250  771 #> [3,]  782  247  251  770 #> [4,]  244  777  773  256 #>  #> , , 1, 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  768  261  265  756 #> [2,]  258  763  759  270 #> [3,]  259  762  758  271 #> [4,]  765  264  268  753 #>  #> , , 2, 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  273  748  744  285 #> [2,]  751  278  282  739 #> [3,]  750  279  283  738 #> [4,]  276  745  741  288 #>  #> , , 3, 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  289  732  728  301 #> [2,]  735  294  298  723 #> [3,]  734  295  299  722 #> [4,]  292  729  725  304 #>  #> , , 4, 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  720  309  313  708 #> [2,]  306  715  711  318 #> [3,]  307  714  710  319 #> [4,]  717  312  316  705 #>  #> , , 1, 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  321  700  696  333 #> [2,]  703  326  330  691 #> [3,]  702  327  331  690 #> [4,]  324  697  693  336 #>  #> , , 2, 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  688  341  345  676 #> [2,]  338  683  679  350 #> [3,]  339  682  678  351 #> [4,]  685  344  348  673 #>  #> , , 3, 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  672  357  361  660 #> [2,]  354  667  663  366 #> [3,]  355  666  662  367 #> [4,]  669  360  364  657 #>  #> , , 4, 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  369  652  648  381 #> [2,]  655  374  378  643 #> [3,]  654  375  379  642 #> [4,]  372  649  645  384 #>  #> , , 1, 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  385  636  632  397 #> [2,]  639  390  394  627 #> [3,]  638  391  395  626 #> [4,]  388  633  629  400 #>  #> , , 2, 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  624  405  409  612 #> [2,]  402  619  615  414 #> [3,]  403  618  614  415 #> [4,]  621  408  412  609 #>  #> , , 3, 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  608  421  425  596 #> [2,]  418  603  599  430 #> [3,]  419  602  598  431 #> [4,]  605  424  428  593 #>  #> , , 4, 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  433  588  584  445 #> [2,]  591  438  442  579 #> [3,]  590  439  443  578 #> [4,]  436  585  581  448 #>  #> , , 1, 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  576  453  457  564 #> [2,]  450  571  567  462 #> [3,]  451  570  566  463 #> [4,]  573  456  460  561 #>  #> , , 2, 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  465  556  552  477 #> [2,]  559  470  474  547 #> [3,]  558  471  475  546 #> [4,]  468  553  549  480 #>  #> , , 3, 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  481  540  536  493 #> [2,]  543  486  490  531 #> [3,]  542  487  491  530 #> [4,]  484  537  533  496 #>  #> , , 4, 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  528  501  505  516 #> [2,]  498  523  519  510 #> [3,]  499  522  518  511 #> [4,]  525  504  508  513 #>  #> , , 1, 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  512  517  521  500 #> [2,]  514  507  503  526 #> [3,]  515  506  502  527 #> [4,]  509  520  524  497 #>  #> , , 2, 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  529  492  488  541 #> [2,]  495  534  538  483 #> [3,]  494  535  539  482 #> [4,]  532  489  485  544 #>  #> , , 3, 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  545  476  472  557 #> [2,]  479  550  554  467 #> [3,]  478  551  555  466 #> [4,]  548  473  469  560 #>  #> , , 4, 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  464  565  569  452 #> [2,]  562  459  455  574 #> [3,]  563  458  454  575 #> [4,]  461  568  572  449 #>  #> , , 1, 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  577  444  440  589 #> [2,]  447  582  586  435 #> [3,]  446  583  587  434 #> [4,]  580  441  437  592 #>  #> , , 2, 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  432  597  601  420 #> [2,]  594  427  423  606 #> [3,]  595  426  422  607 #> [4,]  429  600  604  417 #>  #> , , 3, 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  416  613  617  404 #> [2,]  610  411  407  622 #> [3,]  611  410  406  623 #> [4,]  413  616  620  401 #>  #> , , 4, 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  625  396  392  637 #> [2,]  399  630  634  387 #> [3,]  398  631  635  386 #> [4,]  628  393  389  640 #>  #> , , 1, 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  641  380  376  653 #> [2,]  383  646  650  371 #> [3,]  382  647  651  370 #> [4,]  644  377  373  656 #>  #> , , 2, 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  368  661  665  356 #> [2,]  658  363  359  670 #> [3,]  659  362  358  671 #> [4,]  365  664  668  353 #>  #> , , 3, 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  352  677  681  340 #> [2,]  674  347  343  686 #> [3,]  675  346  342  687 #> [4,]  349  680  684  337 #>  #> , , 4, 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  689  332  328  701 #> [2,]  335  694  698  323 #> [3,]  334  695  699  322 #> [4,]  692  329  325  704 #>  #> , , 1, 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  320  709  713  308 #> [2,]  706  315  311  718 #> [3,]  707  314  310  719 #> [4,]  317  712  716  305 #>  #> , , 2, 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  721  300  296  733 #> [2,]  303  726  730  291 #> [3,]  302  727  731  290 #> [4,]  724  297  293  736 #>  #> , , 3, 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  737  284  280  749 #> [2,]  287  742  746  275 #> [3,]  286  743  747  274 #> [4,]  740  281  277  752 #>  #> , , 4, 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  272  757  761  260 #> [2,]  754  267  263  766 #> [3,]  755  266  262  767 #> [4,]  269  760  764  257 #>  #> , , 1, 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  769  252  248  781 #> [2,]  255  774  778  243 #> [3,]  254  775  779  242 #> [4,]  772  249  245  784 #>  #> , , 2, 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  240  789  793  228 #> [2,]  786  235  231  798 #> [3,]  787  234  230  799 #> [4,]  237  792  796  225 #>  #> , , 3, 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  224  805  809  212 #> [2,]  802  219  215  814 #> [3,]  803  218  214  815 #> [4,]  221  808  812  209 #>  #> , , 4, 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  817  204  200  829 #> [2,]  207  822  826  195 #> [3,]  206  823  827  194 #> [4,]  820  201  197  832 #>  #> , , 1, 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  192  837  841  180 #> [2,]  834  187  183  846 #> [3,]  835  186  182  847 #> [4,]  189  840  844  177 #>  #> , , 2, 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  849  172  168  861 #> [2,]  175  854  858  163 #> [3,]  174  855  859  162 #> [4,]  852  169  165  864 #>  #> , , 3, 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  865  156  152  877 #> [2,]  159  870  874  147 #> [3,]  158  871  875  146 #> [4,]  868  153  149  880 #>  #> , , 4, 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  144  885  889  132 #> [2,]  882  139  135  894 #> [3,]  883  138  134  895 #> [4,]  141  888  892  129 #>  #> , , 1, 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  128  901  905  116 #> [2,]  898  123  119  910 #> [3,]  899  122  118  911 #> [4,]  125  904  908  113 #>  #> , , 2, 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  913  108  104  925 #> [2,]  111  918  922   99 #> [3,]  110  919  923   98 #> [4,]  916  105  101  928 #>  #> , , 3, 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  929   92   88  941 #> [2,]   95  934  938   83 #> [3,]   94  935  939   82 #> [4,]  932   89   85  944 #>  #> , , 4, 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   80  949  953   68 #> [2,]  946   75   71  958 #> [3,]  947   74   70  959 #> [4,]   77  952  956   65 #>  #> , , 1, 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  961   60   56  973 #> [2,]   63  966  970   51 #> [3,]   62  967  971   50 #> [4,]  964   57   53  976 #>  #> , , 2, 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   48  981  985   36 #> [2,]  978   43   39  990 #> [3,]  979   42   38  991 #> [4,]   45  984  988   33 #>  #> , , 3, 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   32  997 1001   20 #> [2,]  994   27   23 1006 #> [3,]  995   26   22 1007 #> [4,]   29 1000 1004   17 #>  #> , , 4, 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,] 1009   12    8 1021 #> [2,]   15 1014 1018    3 #> [3,]   14 1015 1019    2 #> [4,] 1012    9    5 1024 #>   ##non-square arrays: as.standard(magic(7)[1:3,]) #>      [,1] [,2] [,3] #> [1,]    4   12   20 #> [2,]   44    3   11 #> [3,]   42   43    2 #> [4,]   33   41   49 #> [5,]   24   32   40 #> [6,]   15   23   31 #> [7,]   13   21   22   ## Toroidal transforms preserve pandiagonalness: is.pandiagonal(as.standard(hudson(11))) #> [1] TRUE   ## but not magicness: is.magic(as.standard(magic(10),TRUE)) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":null,"dir":"Reference","previous_headings":"","what":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"Cilleruelo Luca give class multiplicative magic squares whose behaviour interesting.","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"","code":"cilleruelo(n, m)"},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"n,m Arguments: usually integers","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"$$     \\left(     \\begin{array}{cccc}     (n+2)(m+0) & (n+3)(m+3) & (n+1)(m+2) & (n+0)(m+1)\\\\     (n+1)(m+1) & (n+0)(m+2) & (n+2)(m+3) & (n+3)(m+0)\\\\     (n+0)(m+3) & (n+1)(m+0) & (n+3)(m+1) & (n+2)(m+2)\\\\     (n+3)(m+2) & (n+2)(m+1) & (n+0)(m+0) & (n+1)(m+3)     \\end{array}     \\right)   $$","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"Returns \\(4\\times 4\\) matrix.","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"Javier Cilleruelo Florian Luca 2010, “multiplicative magic squares”, Electronic Journal Combinatorics vol 17, number 8","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/cilleruelo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class of multiplicative magic squares due to Cilleruelo and Luca — cilleruelo","text":"","code":"is.magic(cilleruelo(5,6)) #> [1] FALSE is.magic(cilleruelo(5,6),func=prod) #> [1] TRUE   f <- function(n){   jj <-     sapply(            seq(from=5,len=n),            function(i){cilleruelo(i,i-4)}            )   xM <- apply(jj,2,max)   xm <- apply(jj,2,min)    cbind(xM-xm , 5^(5/12)*xm^0.5 , 6*xm^0.5) }    matplot(f(200),type='l',log='xy',xlab='n',ylab='') legend(x=\"topleft\",legend=c(\"xM-xm\",\"5^(5/12).xm^(1/2)\",\"6xm^(1/2)\"),        lty=1:3,col=1:3)"},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":null,"dir":"Reference","previous_headings":"","what":"Circulant matrices of any order — circulant","title":"Circulant matrices of any order — circulant","text":"Creates tests circulant matrices order","code":""},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circulant matrices of any order — circulant","text":"","code":"circulant(vec,doseq=TRUE) is.circulant(m,dir=rep(1,length(dim(m))))"},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circulant matrices of any order — circulant","text":"vec,doseq circulant(), vector elements first     row.  vec length one, doseq     TRUE, interpret vec order matrix     return circulant first row seq_len(vec) m .circulant(), matrix tested     circulantism dir .circulant(), direction diagonal.     matrix, default value (c(1,1)) traces major     diagonals","code":""},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Circulant matrices of any order — circulant","text":"matrix \\(\\) circulant major diagonals, including   broken diagonals, uniform; ie   \\(a_{ij}=a_{kl}\\) \\(-j=k-l\\) (modulo   \\(n\\)).  standard values use give 1:n top row. function .circulant(), arbitrary dimensional arrays,   default value dir checks   [v]==[v+rep(1,d)]==...==[v+rep((n-1),d)] v   (, following lines parallel major diagonal); indices   passed process(). general dir, function .circulant() checks   [v]==[v+dir]==[v+2*dir]==...==[v+(n-1)*d]   v. Toeplitz matrix one [,j]=[',j']   whenever |-j|=|'-j'|.  See function toeplitz()   stats package details. elements vec distinct, circulant()   return latin square.  Function latin() synonym   circulant(), see latin.Rd.","code":""},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Circulant matrices of any order — circulant","text":"Arthur T. Benjamin K. Yasuda.  Magic     “Squares” Indeed!, American Mathematical Monthly, vol   106(2), pp152-156, Feb 1999","code":""},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Circulant matrices of any order — circulant","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/circulant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circulant matrices of any order — circulant","text":"","code":"circulant(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]    5    1    2    3    4 #> [3,]    4    5    1    2    3 #> [4,]    3    4    5    1    2 #> [5,]    2    3    4    5    1 circulant(2^(0:4)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    4    8   16 #> [2,]   16    1    2    4    8 #> [3,]    8   16    1    2    4 #> [4,]    4    8   16    1    2 #> [5,]    2    4    8   16    1 is.circulant(circulant(5)) #> [1] TRUE   a <- outer(1:3,1:3,\"+\")%%3  is.circulant(a) #> [1] FALSE  is.circulant(a,c(1,2)) #> [1] TRUE   is.circulant(array(c(1:4,4:1),rep(2,3))) #> [1] TRUE   is.circulant(magic(5)%%5,c(1,-2)) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/reference/cube2.html","id":null,"dir":"Reference","previous_headings":"","what":"A pantriagonal magic cube — cube2","title":"A pantriagonal magic cube — cube2","text":"pantriagonal magic cube order 4 originally due Hendricks","code":""},{"path":"https://robinhankin.github.io/magic/reference/cube2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A pantriagonal magic cube — cube2","text":"","code":"data(cube2)"},{"path":"https://robinhankin.github.io/magic/reference/cube2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A pantriagonal magic cube — cube2","text":"Meaning “pantriagonal” currently unclear","code":""},{"path":"https://robinhankin.github.io/magic/reference/cube2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A pantriagonal magic cube — cube2","text":"Hendricks","code":""},{"path":"https://robinhankin.github.io/magic/reference/cube2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A pantriagonal magic cube — cube2","text":"","code":"data(cube2) is.magichypercube(cube2) #> [1] TRUE is.perfect(cube2) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts broken diagonals — diag.off","title":"Extracts broken diagonals — diag.off","text":"Returns broken diagonals magic square","code":""},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts broken diagonals — diag.off","text":"","code":"diag.off(a, offset = 0, nw.se = TRUE)"},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts broken diagonals — diag.off","text":"Square matrix offset vertical offset nw.se Boolean variable TRUE meaning trace diagonals     along northwest-southeast direction (point [1,n]     [n,1]).","code":""},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts broken diagonals — diag.off","text":"Useful testing panmagic squares.  first element always   unbroken one (ie [1,1] [n,n] nw.se   TRUE [1,n] [n,1] nw.se   FALSE.","code":""},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts broken diagonals — diag.off","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/diag.off.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts broken diagonals — diag.off","text":"","code":"diag.off(magic(10),nw.se=FALSE,offset=0) #>  [1] 43 44 46 48 50 52 54 53 58 57 diag.off(magic(10),nw.se=FALSE,offset=1) #>  [1] 34 41 39 45 23 49 27 56 31 60"},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to array element indices — do.index","title":"Apply a function to array element indices — do.index","text":"Given function f() takes vector indices,  array arbitrary dimensions, apply f() elements ","code":""},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to array element indices — do.index","text":"","code":"do.index(a, f, ...)"},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to array element indices — do.index","text":"Array f Function takes vector argument length     dim() ... arguments supplied f()","code":""},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to array element indices — do.index","text":"Returns matrix dimensions ","code":""},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a function to array element indices — do.index","text":"Robin K. S. Hankin, improvements  Gabor Grothendieck   Martin Maechler, via R help list","code":""},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply a function to array element indices — do.index","text":"Tamas Papp suggests one-liner function(, f, ...){array(apply(.matrix(expand.grid(lapply(dim(),seq_len),KEEP..ATTRS=FALSE)),1,f,...),dim())} functionally identical .index(); faster version implemented package, (IMO) harder read. note function arow() much much faster .index(); often possible rephrase call .index() call arow(); possible unless additional code opacity outweighs speed savings.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/do.index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to array element indices — do.index","text":"","code":"a <- array(0,c(2,3,4)) b <- array(rpois(60,1),c(3,4,5))  f1 <- function(x){sum(x)} f2 <- function(x){sum((x-1)^2)} f3 <- function(x){b[t(x)]} f4 <- function(x){sum(x)%%2} f5 <- function(x,u){x[u]}  do.index(a,f1)    # should match   arow(a,1)+arow(a,2)+arow(a,3) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    3    4    5 #> [2,]    4    5    6 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    4    5    6 #> [2,]    5    6    7 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    5    6    7 #> [2,]    6    7    8 #>  #> , , 4 #>  #>      [,1] [,2] [,3] #> [1,]    6    7    8 #> [2,]    7    8    9 #>  do.index(a,f2) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    4 #> [2,]    1    2    5 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    5 #> [2,]    2    3    6 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    4    5    8 #> [2,]    5    6    9 #>  #> , , 4 #>  #>      [,1] [,2] [,3] #> [1,]    9   10   13 #> [2,]   10   11   14 #>  do.index(a,f3)    # same as  apltake(b,dim(a)) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    3    1 #> [2,]    1    0    1 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    2    1    0 #> [2,]    4    1    1 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    0    0    1 #> [2,]    0    1    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    1    1 #>  do.index(a,f4)    # Male/female toilets at NOC #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    1 #> [2,]    0    1    0 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    1 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    1 #> [2,]    0    1    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    1    0    1 #>  do.index(a,f5,2)  # same as  arow(a,2) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #>  #> , , 4 #>  #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    1    2    3 #>"},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of two magic squares — eq","title":"Comparison of two magic squares — eq","text":"Compares two magic squares according Frenicle's method.   Mnemonic old Fortran “.GT.”  (“Greater ”)   comparison et seq. compare magic square magic square b, elements compared rowwise order: [1,1] compared b[1,1], [1,2] b[1,2], [n,n].  Consider first element different, say [,j].  <b [,j]<b[,j]. generalization hypercubes straightforward: comparisons carried natural order.","code":""},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of two magic squares — eq","text":"","code":"eq(m1, m2) ne(m1, m2) gt(m1, m2) lt(m1, m2) ge(m1, m2) le(m1, m2) m1 %eq% m2 m1 %ne% m2 m1 %gt% m2 m1 %lt% m2 m1 %ge% m2 m1 %le% m2"},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison of two magic squares — eq","text":"m1 First magic square m2 Second magic square","code":""},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Comparison of two magic squares — eq","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Comparison of two magic squares — eq","text":"Rather clumsy function definition due degenerate case   testing two identical matrices (min(NULL) undefined). two arguments assumed matrices size.    , error given.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/eq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison of two magic squares — eq","text":"","code":"magic(4) %eq% magic.4n(1) #> [1] FALSE eq(magic(4) , magic.4n(1)) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":null,"dir":"Reference","previous_headings":"","what":"First non-singleton dimension — fnsd","title":"First non-singleton dimension — fnsd","text":"Given array, returns first non-singleton dimension.  Useful emulating Matlab / Octave's multidimensional functions. n supplied, return first n nonsingleton dimensions.","code":""},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First non-singleton dimension — fnsd","text":"","code":"fnsd(a,n)"},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First non-singleton dimension — fnsd","text":"array n Integer.  Return first n nonsingleton dimensions","code":""},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First non-singleton dimension — fnsd","text":"Returns integer vector elements range 1   length(dim()).","code":""},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"First non-singleton dimension — fnsd","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"First non-singleton dimension — fnsd","text":"Treats zero-extent dimensions singletons. Case n=0 now treated sensibly (returns zero-length vector).","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/fnsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First non-singleton dimension — fnsd","text":"","code":"a <- array(1:24,c(1,1,1,1,2,1,3,4)) fnsd(a) #> [1] 5 fnsd(a,2) #> [1] 5 7"},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Integerize array elements — force.integer","title":"Integerize array elements — force.integer","text":"Returns elementwise .integer-ed array.  magic squares integer elements.","code":""},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integerize array elements — force.integer","text":"","code":"force.integer(x)"},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integerize array elements — force.integer","text":"x Array converted","code":""},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integerize array elements — force.integer","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Integerize array elements — force.integer","text":"Function force.integer() differs .integer()   latter returns integer vector, former returns array   whose elements  integer versions x; see examples section   .","code":""},{"path":"https://robinhankin.github.io/magic/reference/force.integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integerize array elements — force.integer","text":"","code":"a <- matrix(rep(1,4),2,2) force.integer(a) #>      [,1] [,2] #> [1,]    1    1 #> [2,]    1    1 as.integer(a) #> [1] 1 1 1 1"},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":null,"dir":"Reference","previous_headings":"","what":"Hadamard matrices — hadamard","title":"Hadamard matrices — hadamard","text":"Various functionality Hadamard matrices","code":""},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hadamard matrices — hadamard","text":"","code":"sylvester(k) is.hadamard(m)"},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hadamard matrices — hadamard","text":"k Function sylvester() gives k-th Sylvester     matrix m matrix","code":""},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hadamard matrices — hadamard","text":"Hadamard matrix square matrix whose entries either +1   -1 whose rows mutually orthogonal.","code":""},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hadamard matrices — hadamard","text":"“Hadamard matrix.” Wikipedia, Free Encyclopedia. 19 Jan 2009, 18:21 UTC. 20 Jan 2009","code":""},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hadamard matrices — hadamard","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/hadamard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hadamard matrices — hadamard","text":"","code":"is.hadamard(sylvester(4)) #> [1] TRUE image(sylvester(5))"},{"path":"https://robinhankin.github.io/magic/reference/hendricks.html","id":null,"dir":"Reference","previous_headings":"","what":"A perfect magic cube due to Hendricks — hendricks","title":"A perfect magic cube due to Hendricks — hendricks","text":"perfect \\(8\\times 8\\times 8\\) magic cube due Hendricks","code":""},{"path":"https://robinhankin.github.io/magic/reference/hendricks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A perfect magic cube due to Hendricks — hendricks","text":"","code":"data(hendricks)"},{"path":"https://robinhankin.github.io/magic/reference/hendricks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A perfect magic cube due to Hendricks — hendricks","text":"","code":"data(hendricks) is.perfect(hendricks) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":null,"dir":"Reference","previous_headings":"","what":"Pandiagonal magic squares due to Hudson — hudson","title":"Pandiagonal magic squares due to Hudson — hudson","text":"Returns regular pandiagonal magic square order \\(6m\\pm 1\\) using method developed Hudson.","code":""},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pandiagonal magic squares due to Hudson — hudson","text":"","code":"hudson(n = NULL, a = NULL, b = NULL)"},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pandiagonal magic squares due to Hudson — hudson","text":"n Order square, \\(n=6m\\pm 1\\).      NULL, use length first line Hudson's \\(\\) matrix.      NULL, use Hudson's value c(n-1,0:(n-2)) b first line Hudson's \\(B\\) matrix.      NULL, use Hudson's value c(2:(n-1),n,1).     Using default values b gives associative square","code":""},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pandiagonal magic squares due to Hudson — hudson","text":"Returns one member set regular magic squares order   \\(n=6m\\pm 1\\).  set size \\((n!)^2\\). Note n checked form \\(6n\\pm     1\\).  correct form, square magic     necessarily normal.","code":""},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pandiagonal magic squares due to Hudson — hudson","text":"C. B. Hudson, pandiagonal squares order 6t +/- 1,   Mathematics Magazine, March 1972, pp94-96","code":""},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pandiagonal magic squares due to Hudson — hudson","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/hudson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pandiagonal magic squares due to Hudson — hudson","text":"","code":"hudson(n=11) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] #>  [1,]  112    3   15   27   39   51   63   75   87    99   100 #>  [2,]   92  104  116    7   19   31   43   55   56    68    80 #>  [3,]   72   84   96  108  120   11   12   24   36    48    60 #>  [4,]   52   64   76   88   89  101  113    4   16    28    40 #>  [5,]   32   44   45   57   69   81   93  105  117     8    20 #>  [6,]    1   13   25   37   49   61   73   85   97   109   121 #>  [7,]  102  114    5   17   29   41   53   65   77    78    90 #>  [8,]   82   94  106  118    9   21   33   34   46    58    70 #>  [9,]   62   74   86   98  110  111    2   14   26    38    50 #> [10,]   42   54   66   67   79   91  103  115    6    18    30 #> [11,]   22   23   35   47   59   71   83   95  107   119    10 magicplot(hudson(n=11))  is.associative(hudson(n=13)) #> [1] TRUE hudson(a=(2*1:13)%%13 ,  b=(8*1:13)%%13) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   34   55   89  110  131  165   17   51   72    93   127   148     0 #>  [2,]  154    6   27   61   82  116  137  158   23    44    65    99   120 #>  [3,]   92  126  147   12   33   54   88  109  130   164    16    50    71 #>  [4,]   43   77   98  119  153    5   26   60   81   115   136   157    22 #>  [5,]  163   15   49   70   91  125  146   11   32    53    87   108   142 #>  [6,]  114  135  156   21   42   76   97  118  152     4    38    59    80 #>  [7,]   52   86  107  141  162   14   48   69  103   124   145    10    31 #>  [8,]    3   37   58   79  113  134  168   20   41    75    96   117   151 #>  [9,]  123  144    9   30   64   85  106  140  161    13    47    68   102 #> [10,]   74   95  129  150    2   36   57   78  112   133   167    19    40 #> [11,]   25   46   67  101  122  143    8   29   63    84   105   139   160 #> [12,]  132  166   18   39   73   94  128  149    1    35    56    90   111 #> [13,]   83  104  138  159   24   45   66  100  121   155     7    28    62 all(replicate(10,is.magic(hudson(a=sample(13),b=sample(13))))) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":null,"dir":"Reference","previous_headings":"","what":"Various tests for the magicness of a square — is.magic","title":"Various tests for the magicness of a square — is.magic","text":"Returns TRUE square magic, semimagic, panmagic, associative,   normal.  argument give.answers TRUE, also returns   additional information sums.","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various tests for the magicness of a square — is.magic","text":"","code":"is.magic(m, give.answers = FALSE, func=sum, boolean=FALSE)  is.panmagic(m, give.answers = FALSE, func=sum, boolean=FALSE)  is.pandiagonal(m, give.answers = FALSE, func=sum, boolean=FALSE)  is.semimagic(m, give.answers = FALSE, func=sum, boolean=FALSE)  is.semimagic.default(m) is.associative(m) is.normal(m) is.sparse(m) is.mostperfect(m,give.answers=FALSE) is.2x2.correct(m,give.answers=FALSE) is.bree.correct(m,give.answers=FALSE) is.latin(m,give.answers=FALSE) is.antimagic(m, give.answers = FALSE, func=sum)  is.totally.antimagic(m, give.answers = FALSE, func=sum) is.heterosquare(m, func=sum)  is.totally.heterosquare(m, func=sum) is.sam(m) is.stam(m)"},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various tests for the magicness of a square — is.magic","text":"m square tested give.answers Boolean, TRUE meaning return additional     information sums (see details) func function evaluated row, column,     unbroken diagonal boolean Boolean, TRUE meaning square     deemed magic, semimagic, etc, applications func     evaluate TRUE.  boolean FALSE, square     m magic etc applications func     identical","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Various tests for the magicness of a square — is.magic","text":"semimagic square one whose row sums equal     columnwise sums (ie magic constant). magic square semimagic square sum     unbroken diagonals equal magic constant. panmagic square magic square whose broken     diagonals sum magic constant.  Ollerenshaw calls     “pandiagonal” square. -perfect square 2--2 arrays anywhere     within square summing \\(2S\\) \\(S=n^2+1\\);     pairs integers \\(n/2\\) distant along major (NW-SE)     diagonal sum \\(S\\) (note \\(S\\) used differs     Ollerenshaw's squares numbered starting     zero).  first condition tested .2x2.correct()     second .bree.correct(). -perfect squares panmagic. normal square one contains \\(n^2\\)     consecutive integers (typically starting 0 1). sparse matrix one whose nonzero entries     consecutive integers, starting 1. associative square (also regular square) magic square     \\(a_{,j}+a_{n+1-,n+1-j}=n^2+1\\).     Note associative semimagic square magic; see also     .square.palindromic().  definition extends magic     hypercubes: hypercube associative +arev()     constant. ultramagic square pandiagonal associative. latin square size \\(n\\times n\\) one     column row comprises integers 1 n (    necessarily order).  Function .latin() wrapper     .latinhypercube() natural way     present extra information given give.answers     TRUE manner consistent functions     documented . antimagic square one whose row sums column     sums consecutive integers; totally antimagic square     one whose row sums, column sums, two unbroken diagonals     consecutive integers.  Observe antimagic square     necessarily totally antimagic, vice-versa. heterosquare rowsums column sums     distinct; totally heterosquare [NB nonstandard terminology]     rowsums, columnsums, two long diagonals distinct. square sam (SAM) sparse     antimagic;  stam (STAM) sparse     totally antimagic.  See documentation SAM.","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various tests for the magicness of a square — is.magic","text":"Returns TRUE square semimagic, etc. FALSE    . give.answers taken argument TRUE,   return list least five elements.  first element   list answer: TRUE square (semimagic,   magic, panmagic) FALSE otherwise.  Elements 2-5 give   result call allsums(), viz: rowwise columnwise   sums; broken major (ie NW-SE) minor (ie NE-SW) diagonal sums. Function .bree.correct() also returns sums   elements distant \\(n/2\\) along major diagonal   (diag.sums); function .2x2.correct() returns   sum \\(2\\times 2\\) submatrix (tbt.sums);   size windows use subsums() directly.   Function .mostperfect() returns . Function .semimagic.default() returns TRUE   argument semimagic [respect sum()] using faster   method .semimagic().","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Various tests for the magicness of a square — is.magic","text":"Functions take func argument apply function   row, column, diagonal necessary.  func takes   default value sum(), sum returned;   prod(), product returned, .    many choices argument produce interesting tests;   consider func=max, example.  , “magic”   square one whose row, sum (unbroken) diagonals identical   maxima.  Thus diag(5) magic respect max(),   diag(6) . Argument boolean designed use non-default values   func argument; example, latin square semimagic   respect func=function(x){(diff(sort(x))==1)}. Function .magic() vectorized; list supplied,   defaults assumed.","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Various tests for the magicness of a square — is.magic","text":"https://mathworld.wolfram.com/MagicSquare.html","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Various tests for the magicness of a square — is.magic","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/is.magic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various tests for the magicness of a square — is.magic","text":"","code":"is.magic(magic(4)) #> [1] TRUE  is.magic(diag(7),func=max)  # TRUE #> [1] TRUE is.magic(diag(8),func=max)  # FALSE #> [1] FALSE  stopifnot(is.magic(magic(3:8)))  is.panmagic(panmagic.4()) #> [1] TRUE is.panmagic(panmagic.8()) #> [1] TRUE  data(Ollerenshaw) is.mostperfect(Ollerenshaw) #> [1] TRUE  proper.magic <- function(m){is.magic(m) & is.normal(m)} proper.magic(magic(20)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":null,"dir":"Reference","previous_headings":"","what":"magic hypercubes — is.magichypercube","title":"magic hypercubes — is.magichypercube","text":"Returns TRUE hypercube semimagic, magic, perfect","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"magic hypercubes — is.magichypercube","text":"","code":"is.semimagichypercube(a, give.answers=FALSE, func=sum, boolean=FALSE, ...) is.diagonally.correct(a, give.answers = FALSE, func=sum, boolean=FALSE, ...)  is.magichypercube(a, give.answers = FALSE, func=sum, boolean=FALSE, ...)  is.perfect(a, give.answers = FALSE, func=sum, boolean=FALSE) is.latinhypercube(a, give.answers=FALSE) is.alicehypercube(a,ndim,give.answers=FALSE, func=sum, boolean=FALSE)"},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"magic hypercubes — is.magichypercube","text":"hypercube (array) tested give.answers Boolean, TRUE meaning also return     sums func Function applied across dimension ndim .alicehypercube(), dimensionality     subhypercube take sums .  See details section boolean Boolean, TRUE meaning hypercube     deemed magic, semimagic, etc, applications func     evaluate TRUE.  boolean FALSE,     hypercube magic etc applications func     identical ... arguments passed func()","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"magic hypercubes — is.magichypercube","text":"(Although apparently non-standard, hypercube defined   dimension \\(d\\) order \\(n\\)—thus \\(n^d\\)   elements).  semimagic hypercube “rook's move” sums     equal magic constant (, \\(\\sum     [i_1,i_2,\\ldots,i_{r-1},,i_{r+1}, \\ldots,i_d]\\) \\(1\\leqslant r\\leqslant d\\) equal magic constant values     \\(\\)'s).  .semimagichypercube(),     give.answers TRUE, sums returned     form array dimension c(rep(n,d-1),d).  first     d-1 dimensions coordinates projection     summed elements onto surface hypercube.  last dimension     indicates dimension along sum taken . Optional argument func, defaulting sum(), indicates     function taken d dimensions.     Currently requires func return scalar. Latin hypercube one line elements     whose coordinates differ one dimension comprises numbers     \\(1\\) \\(n\\) (\\(0\\) \\(n-1\\)), necessarily     order.  integer thus appears \\(n^{d-1}\\) times. magic hypercube semimagic hypercube     additional requirement \\(2^{d-1}\\) long (ie     extreme point--extreme point) diagonals sum correctly.  Correct     diagonal summation tested .diagonally.correct();     specifying function sum(), criteria     diagonals returning correct sum may tested. Alice hypercube different generalization     semimagic square higher dimensions.  named . M. Hankin     (“Alice”), originally suggested . semimagic hypercube one-dimensional subhypercubes (ie     lines) summing correctly.  Alice hypercube one     ndim-dimensional subhypercubes sum,     ndim fixed integer argument.  Thus,     hypercube size \\(n^d\\), .alicehypercube(,ndim)     returns TRUE n^{d-ndim} subhypercubes     sum. example, four-dimensional dimension     \\(5\\times 5\\times 5\\times 5\\)     .alicehypercube(,1) TRUE     semimagic hypercube: \\({4\\choose 1}5^3=500\\)     one-dimensional subhypercubes sum.      .alicehypercube(,2) TRUE 2-dimensional     subhypercubes (ie \\({4\\choose 2}\\times 5^2=150\\)     \\(5\\times 5\\) squares, example [,2,4,]     [1,1,,]) sum.      .alicehypercube(,3) means 3d subhypercubes (ie     \\({4\\choose 3}\\times 5^1=20\\) \\(5\\times     5\\times 5\\) cubes, example [,,1,]     [4,,,]) sum.  hypercube ,     .alicehypercube(,dim()) returns TRUE. semimagic hypercube Alice hypercube value     ndim. perfect magic hypercube (use .perfect())     magic hypercube nonbroken diagonals summing correctly.     seriously restrictive requirement high dimensional     hypercubes.  yet, function take     give.answers argument. pandiagonal magic hypercube, also Nasik     hypercube (sometimes just perfect hypercube)     semimagic hypercube diagonals, including broken diagonals,     summing correctly.  implemented. terminology area pretty confusing. .magichypercube(), argument give.answers=TRUE   list returned.  first element list Boolean   TRUE array magic hypercube.  second   element third elements answers   fromis.semimagichypercube() .diagonally.correct()   respectively. .diagonally.correct(), argument   give.answers=TRUE, function also returns array   dimension c(q,rep(2,d)) (, \\(q\\times 2^d\\)   elements), \\(q\\) length func() applied   long diagonal (\\(q=1\\), first dimension   dropped).  \\(q=1\\), dimension d index 1   means func() applied elements   \\(d^{\\rm th}\\) dimension running 1:n; index 2   means run n:1.  \\(q>1\\), index first   dimension gives index func(), subsequent dimensions   indices 1 2 interpreted way. example function two identical   given . func=f f function returning vector   length , .diagonally.correct() returns array   dimension c(,rep(2,d)),   [,i_1,i_2,...,i_d] f(x) x   appropriate long diagonal.  Thus \\(2^d\\) equalities   [,i_1,i_2,...,i_d]==[,3-i_1,3-i_2,...,3-i_d] hold   identical(f(x),f(rev(x))) TRUE long   diagonal (condition met, example, sum()   identity function function(x){x[1]}).","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"magic hypercubes — is.magichypercube","text":"R. K. S. Hankin 2005.  “Recreational mathematics R:       introducing magic package”.  R news, 5(1) Richards 1980. “Generalized magic cubes”.     Mathematics Magazine, volume 53, number 2, (March).","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"magic hypercubes — is.magichypercube","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"magic hypercubes — is.magichypercube","text":"page, “subhypercube” restricted rectangularly-oriented subarrays; see note subhypercubes. subhypercubes magic hypercube necessarily magic! (example, consider 5-dimensional magic hypercube .  square b defined [1,1,1,,] might magic: diagonals b covered definition magic hypercube). subhypercubes magic hypercube even semimagic: see example. Even three dimensions, perfect pretty bad.  Consider \\(5\\times5\\times 5\\) (ie three dimensional), cube.  Say =magiccube.2np1(2).  square defined sapply(1:n,function(){[,,6-]}, simplify=TRUE), subhypercube , even semimagic: rowsums incorrect (colsums must sum correctly magic). Note diagonals square two “extreme point--point” diagonals . pandiagonal magic hypercube (sometimes just perfect hypercube) semimagic addition sums diagonals, including broken diagonals, correct.  one seriously bad-ass requirement.  reckon total \\(\\frac{1}{2}\\left( 3^d-1\\right)\\cdot n^{d-1}\\) correct summations.  coded yet; see anything like vectorized manner.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/is.magichypercube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"magic hypercubes — is.magichypercube","text":"","code":"library(abind) is.semimagichypercube(magiccube.2np1(1)) #> [1] TRUE is.semimagichypercube(magichypercube.4n(1,d=4)) #> [1] TRUE  is.perfect(magichypercube.4n(1,d=4)) #> [1] FALSE  # Now try an array with minmax(dim(a))==FALSE: a <- abind(magiccube.2np1(1),magiccube.2np1(1),along=2) is.semimagichypercube(a,g=TRUE)$rook.sums #> [[1]] #>      [,1] [,2] [,3] #> [1,]   42   42   42 #> [2,]   42   42   42 #> [3,]   42   42   42 #> [4,]   42   42   42 #> [5,]   42   42   42 #> [6,]   42   42   42 #>  #> [[2]] #>      [,1] [,2] [,3] #> [1,]   84   84   84 #> [2,]   84   84   84 #> [3,]   84   84   84 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]   42   42   42   42   42   42 #> [2,]   42   42   42   42   42   42 #> [3,]   42   42   42   42   42   42 #>   # is.semimagichypercube() takes further arguments: mymax <- function(x,UP){max(c(x,UP))} not_mag  <- array(1:81,rep(3,4)) is.semimagichypercube(not_mag,func=mymax,UP=80)  # FALSE #> [1] FALSE is.semimagichypercube(not_mag,func=mymax,UP=81)  # TRUE #> [1] TRUE   a2 <- magichypercube.4n(m=1,d=4) is.diagonally.correct(a2) #> [1] TRUE is.diagonally.correct(a2,g=TRUE)$diag.sums #> , , 1, 1 #>  #>      [,1] [,2] #> [1,]  514  514 #> [2,]  514  514 #>  #> , , 2, 1 #>  #>      [,1] [,2] #> [1,]  514  514 #> [2,]  514  514 #>  #> , , 1, 2 #>  #>      [,1] [,2] #> [1,]  514  514 #> [2,]  514  514 #>  #> , , 2, 2 #>  #>      [,1] [,2] #> [1,]  514  514 #> [2,]  514  514 #>   ## To extract corner elements (note func(1:n) != func(n:1)): is.diagonally.correct(a2,func=function(x){x[1]},g=TRUE)$diag.sums  #> , , 1, 1 #>  #>      [,1] [,2] #> [1,]    1   13 #> [2,]    4   16 #>  #> , , 2, 1 #>  #>      [,1] [,2] #> [1,]   49   61 #> [2,]   52   64 #>  #> , , 1, 2 #>  #>      [,1] [,2] #> [1,]  193  205 #> [2,]  196  208 #>  #> , , 2, 2 #>  #>      [,1] [,2] #> [1,]  241  253 #> [2,]  244  256 #>    #Now for a subhypercube of a magic hypercube that is not semimagic: is.magic(allsubhypercubes(magiccube.2np1(1))[[10]]) #> [1] FALSE  data(hendricks) is.perfect(hendricks) #> [1] TRUE   #note that Hendricks's magic cube also has many broken diagonals summing #correctly:  a <- allsubhypercubes(hendricks) ld <- function(a){length(dim(a))}  jj <- unlist(lapply(a,ld)) f <- function(i){is.perfect(a[[which(jj==2)[i]]])} all(sapply(1:sum(jj==2),f)) #> [1] TRUE  #but this is NOT enough to ensure that it is pandiagonal (but I #think hendricks is pandiagonal).   is.alicehypercube(magichypercube.4n(1,d=5),4,give.answers=TRUE) #> $answer #> [1] TRUE #>  #> $alice.sums #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,] 131200 131200 131200 131200 131200 #> [2,] 131200 131200 131200 131200 131200 #> [3,] 131200 131200 131200 131200 131200 #> [4,] 131200 131200 131200 131200 131200 #>"},{"path":"https://robinhankin.github.io/magic/reference/is.ok.html","id":null,"dir":"Reference","previous_headings":"","what":"does a vector have the sum required to be a row or column of a magic square? — is.ok","title":"does a vector have the sum required to be a row or column of a magic square? — is.ok","text":"Returns TRUE sum(vec)==magic.constant(n,d=d))","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"does a vector have the sum required to be a row or column of a magic square? — is.ok","text":"","code":"is.ok(vec, n=length(vec), d=2)"},{"path":"https://robinhankin.github.io/magic/reference/is.ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"does a vector have the sum required to be a row or column of a magic square? — is.ok","text":"vec Vector tested n Order square hypercube.  Default assumes order equal     length vec d Dimension square hypercube.  Default 2 corresponds square","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.ok.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"does a vector have the sum required to be a row or column of a magic square? — is.ok","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.ok.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"does a vector have the sum required to be a row or column of a magic square? — is.ok","text":"","code":"is.ok(magic(5)[1,]) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a square matrix square palindromic? — is.square.palindromic","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"Implementation various properties presented paper Arthur   T. Benjamin K. Yasuda","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"","code":"is.square.palindromic(m, base=10, give.answers=FALSE) is.centrosymmetric(m) is.persymmetric(m)"},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"m square tested base Base number expansion, defaulting 10; relevant     “sufficient” part test give.answers Boolean, TRUE meaning return     additional information","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"following tests apply general square matrix m size \\(n\\times n\\). centrosymmetric square one [,j]=[n+1-,n+1-j]; use .centrosymmetric() test (compare associative square).  Note definition extends naturally hypercubes: hypercube centrosymmetric (==arev()). persymmetric square one [,j]=[n+1-j,n+1-]; use .persymmetric() test . matrix square palindromic satisfies rather complicated conditions set Benjamin Yasuda (see refs).","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"functions return list Boolean variables whose value depends   whether m property question. argument give.answers takes default value   FALSE, Boolean value returned shows whether   sufficient conditions met. argument give.answers TRUE, detailed list   given shows status individual test,   necessary sufficient conditions.  value second element   (named necessary) status Theorem 1 page 154. Note necessary conditions depend base b   (technically, neither sufficient conditions, square   palindrome requires sums match every base b.   implementation, “sufficient” defined   respect particular base).","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"Arthur T. Benjamin K. Yasuda.  Magic     “Squares” Indeed!, American Mathematical Monthly, vol   106(2), pp152-156, Feb 1999","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"Every associative square square palindromic, according Benjamin   Yasuda. Function .square.palindromic() yet take   give.answers argument , say, .magic().","code":""},{"path":"https://robinhankin.github.io/magic/reference/is.square.palindromic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a square matrix square palindromic? — is.square.palindromic","text":"","code":"is.square.palindromic(magic(3)) #> [1] TRUE is.persymmetric(matrix(c(1,0,0,1),2,2)) #> [1] TRUE  #now try a circulant: a <- matrix(0,5,5) is.square.palindromic(circulant(10))  #should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":null,"dir":"Reference","previous_headings":"","what":"Random latin squares — latin","title":"Random latin squares — latin","text":"Various functionality generating random latin squares.  Function   latin() synonym circulant()   documented circulant.Rd.","code":""},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random latin squares — latin","text":"","code":"incidence(a) is.incidence(a, include.improper) is.incidence.improper(a) unincidence(a) inc_to_inc(a) another_latin(a) another_incidence(i) rlatin(n,size=NULL,start=NULL,burnin=NULL)"},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random latin squares — latin","text":"latin square incidence array n,include.improper,size,start,burnin Various control arguments;     see details section","code":""},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random latin squares — latin","text":"Function latin(), called Function incidence() takes integer array     (specifically, latin square) returns incidence array     per Jacobson Matthew 1996 Function .incidence() tests array     incidence array; argument include.improper TRUE,     admit improper array Function .incidence.improper() tests array     improper array Function unincidence() converts incidence array     latin square Function another_latin() takes latin square     returns different latin square Function another_incidence() takes incidence array     returns different incidence array Function rlatin() generates (Markov) sequence     random latin squares, arranged 3D array.  Argument n     specifies many generate; argument size gives size     latin squares generated; argument start gives start     latin square (must latin checked     .latin()); argument burnin gives burn-value     (number Markov steps discard). Default value NULL argument size means take     size argument start; default value NULL     argument start means use circulant(size) special case, argument size start     take default value NULL, argument n     interpreted size single random latin square     returned; arguments take default values.      ensures “rlatin(n)” returns single random     \\(n\\times n\\) latin square. latin square \\(n\\)--\\(n\\) matrix containing integers \\(1\\) \\(n\\) arranged number occurs exactly row column. Jacobson Matthew 1996, \\(n\\times n\\) latin square LS equivalent \\(n\\times n\\times n\\) array entries 0 1; dimensions identified rows, columns symbols LS; 1 appears cell \\((r,c,s)\\) iffi symbol \\(s\\) appears row \\(r\\), column \\(s\\) LS. Jacobson Matthew call incidence cube. notation readily generalized latin hypercubes incidence() dimensionally vectorized. improper incidence cube incidence cube includes single \\(-1\\) entry; entries must 0 1; line sums must equal 1.","code":""},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random latin squares — latin","text":"M. T. Jacobson P. Matthews 1996. “Generating     uniformly distributed random latin squares”.  Journal     Combinatorial Designs, volume 4, . 6, pp405–437","code":""},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random latin squares — latin","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/latin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random latin squares — latin","text":"","code":"rlatin(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    5    2    4    3 #> [2,]    4    1    5    3    2 #> [3,]    3    2    4    1    5 #> [4,]    5    4    3    2    1 #> [5,]    2    3    1    5    4 rlatin(n=2, size=4, burnin=10) #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    4    3    2    1 #> [2,]    3    4    1    2 #> [3,]    1    2    4    3 #> [4,]    2    1    3    4 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    3    2    1    4 #> [2,]    1    3    4    2 #> [3,]    4    1    2    3 #> [4,]    2    4    3    1 #>   # An example that allows one to optimize an objective function # [here f()] over latin squares: gr <- function(x){ another_latin(matrix(x,7,7)) } set.seed(0) index <- sample(49,20) f <- function(x){ sum(x[index])} jj <- optim(par=as.vector(latin(7)), fn=f, gr=gr, method=\"SANN\", control=list(maxit=10)) best_latin <- matrix(jj$par,7,7) print(best_latin) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    6    3    4    5    2    7 #> [2,]    5    1    2    3    4    7    6 #> [3,]    7    2    4    6    3    1    5 #> [4,]    6    5    7    1    2    3    4 #> [5,]    4    7    5    2    1    6    3 #> [6,]    3    4    1    7    6    5    2 #> [7,]    2    3    6    5    7    4    1 print(f(best_latin)) #> [1] 68  #compare starting value: f(circulant(7)) #> [1] 73"},{"path":"https://robinhankin.github.io/magic/reference/lozenge.html","id":null,"dir":"Reference","previous_headings":"","what":"Conway's lozenge algorithm for magic squares — lozenge","title":"Conway's lozenge algorithm for magic squares — lozenge","text":"Uses John Conway's lozenge algorithm produce magic squares   odd order.","code":""},{"path":"https://robinhankin.github.io/magic/reference/lozenge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conway's lozenge algorithm for magic squares — lozenge","text":"","code":"lozenge(m)"},{"path":"https://robinhankin.github.io/magic/reference/lozenge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conway's lozenge algorithm for magic squares — lozenge","text":"m magic square returned order n=2m+1","code":""},{"path":"https://robinhankin.github.io/magic/reference/lozenge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conway's lozenge algorithm for magic squares — lozenge","text":"Robin Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/lozenge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conway's lozenge algorithm for magic squares — lozenge","text":"","code":"lozenge(4) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]   50   60   70   80    9   10   20   30   40 #>  [2,]   58   68   78    7   17   27   28   38   48 #>  [3,]   66   76    5   15   25   35   45   46   56 #>  [4,]   74    3   13   23   33   43   53   63   64 #>  [5,]    1   11   21   31   41   51   61   71   81 #>  [6,]   18   19   29   39   49   59   69   79    8 #>  [7,]   26   36   37   47   57   67   77    6   16 #>  [8,]   34   44   54   55   65   75    4   14   24 #>  [9,]   42   52   62   72   73    2   12   22   32 all(sapply(1:10,function(n){is.magic(lozenge(n))})) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magic-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Investigate Magic Squares — magic-package","title":"Create and Investigate Magic Squares — magic-package","text":"collection functions manipulation  analysis arbitrarily dimensioned arrays.  original motivation  package development efficient, vectorized  algorithms creation investigation magic squares  high-dimensional magic hypercubes.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create and Investigate Magic Squares — magic-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create and Investigate Magic Squares — magic-package","text":"Robin K. S. Hankin [aut, cre] (ORCID:     <https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create and Investigate Magic Squares — magic-package","text":"R. K. S. Hankin 2005.  “Recreational mathematics R:       introducing magic package”.  R news, 5(1)","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and Investigate Magic Squares — magic-package","text":"","code":"magic(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    7    6   35   34   15   14 #> [2,]    8    5   33   36   16   13 #> [3,]   27   26   19   18   11   10 #> [4,]   25   28   20   17    9   12 #> [5,]   23   22    3    2   31   30 #> [6,]   21   24    1    4   29   32  magicplot(magic(8))   magichypercube.4n(1) #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   64    5    9   52 #> [2,]    2   59   55   14 #> [3,]    3   58   54   15 #> [4,]   61    8   12   49 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   17   44   40   29 #> [2,]   47   22   26   35 #> [3,]   46   23   27   34 #> [4,]   20   41   37   32 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   33   28   24   45 #> [2,]   31   38   42   19 #> [3,]   30   39   43   18 #> [4,]   36   25   21   48 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   16   53   57    4 #> [2,]   50   11    7   62 #> [3,]   51   10    6   63 #> [4,]   13   56   60    1 #>   is.alicehypercube(magichypercube.4n(1,d=5),4,give.answers=TRUE) #> $answer #> [1] TRUE #>  #> $alice.sums #>        [,1]   [,2]   [,3]   [,4]   [,5] #> [1,] 131200 131200 131200 131200 131200 #> [2,] 131200 131200 131200 131200 131200 #> [3,] 131200 131200 131200 131200 131200 #> [4,] 131200 131200 131200 131200 131200 #>"},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic squares of odd order — magic.2np1","title":"Magic squares of odd order — magic.2np1","text":"Function create magic squares odd order","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic squares of odd order — magic.2np1","text":"","code":"magic.2np1(m, ord.vec = c(-1, 1), break.vec = c(1, 0), start.point = NULL)"},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic squares of odd order — magic.2np1","text":"m creates magic square order \\(n=2m+1\\) ord.vec ordinary vector.  Default value c(-1,1)     corresponds usual northeast direction break.vec break vector.  Default c(1,0) corresponds     usual south direction start.point Starting position method (ie coordinates     unity).  Default value NULL corresponds row 1, column m","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magic squares of odd order — magic.2np1","text":"Written loads places.  method (least   default ordinary break vectors) seems known since   least Renaissance. Benson Jacoby, Mathematica website, discuss problem   nondefault ordinary break vectors.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic squares of odd order — magic.2np1","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magic.2np1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic squares of odd order — magic.2np1","text":"","code":"magic.2np1(1) #>      [,1] [,2] [,3] #> [1,]    8    1    6 #> [2,]    3    5    7 #> [3,]    4    9    2 f <- function(n){is.magic(magic.2np1(n))} all(sapply(1:20,f)) #> [1] TRUE  is.panmagic(magic.2np1(5,ord.vec=c(2,1),break.vec=c(1,3))) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magic.4n.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic squares of order 4n — magic.4n","title":"Magic squares of order 4n — magic.4n","text":"Produces associative magic square order \\(4n\\) using   delta-x method.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic squares of order 4n — magic.4n","text":"","code":"magic.4n(m)"},{"path":"https://robinhankin.github.io/magic/reference/magic.4n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic squares of order 4n — magic.4n","text":"m Order \\(n\\) square given \\(n=4m\\)","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4n.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic squares of order 4n — magic.4n","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magic.4n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic squares of order 4n — magic.4n","text":"","code":"magic.4n(4) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  256   17   33  208  192   81   97  144  128   145   161    80    64 #>  [2,]    2  239  223   50   66  175  159  114  130   111    95   178   194 #>  [3,]    3  238  222   51   67  174  158  115  131   110    94   179   195 #>  [4,]  253   20   36  205  189   84  100  141  125   148   164    77    61 #>  [5,]  252   21   37  204  188   85  101  140  124   149   165    76    60 #>  [6,]    6  235  219   54   70  171  155  118  134   107    91   182   198 #>  [7,]    7  234  218   55   71  170  154  119  135   106    90   183   199 #>  [8,]  249   24   40  201  185   88  104  137  121   152   168    73    57 #>  [9,]  248   25   41  200  184   89  105  136  120   153   169    72    56 #> [10,]   10  231  215   58   74  167  151  122  138   103    87   186   202 #> [11,]   11  230  214   59   75  166  150  123  139   102    86   187   203 #> [12,]  245   28   44  197  181   92  108  133  117   156   172    69    53 #> [13,]  244   29   45  196  180   93  109  132  116   157   173    68    52 #> [14,]   14  227  211   62   78  163  147  126  142    99    83   190   206 #> [15,]   15  226  210   63   79  162  146  127  143    98    82   191   207 #> [16,]  241   32   48  193  177   96  112  129  113   160   176    65    49 #>       [,14] [,15] [,16] #>  [1,]   209   225    16 #>  [2,]    47    31   242 #>  [3,]    46    30   243 #>  [4,]   212   228    13 #>  [5,]   213   229    12 #>  [6,]    43    27   246 #>  [7,]    42    26   247 #>  [8,]   216   232     9 #>  [9,]   217   233     8 #> [10,]    39    23   250 #> [11,]    38    22   251 #> [12,]   220   236     5 #> [13,]   221   237     4 #> [14,]    35    19   254 #> [15,]    34    18   255 #> [16,]   224   240     1 is.magic(magic.4n(5)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic squares of order 4n+2 — magic.4np2","title":"Magic squares of order 4n+2 — magic.4np2","text":"Produces magic square order \\(4n+2\\) using   Conway's “LUX” method","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic squares of order 4n+2 — magic.4np2","text":"","code":"magic.4np2(m)"},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic squares of order 4n+2 — magic.4np2","text":"m returns magic square order \\(n=4m+2\\)     \\(m\\geqslant 1\\), using Conway's     “LUX” construction","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magic squares of order 4n+2 — magic.4np2","text":"https://mathworld.wolfram.com/MagicSquare.html","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic squares of order 4n+2 — magic.4np2","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Magic squares of order 4n+2 — magic.4np2","text":"entirely happy method used: complicated","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magic.4np2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic squares of order 4n+2 — magic.4np2","text":"","code":"magic.4np2(1) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]   32   29    4    1   24   21 #> [2,]   30   31    2    3   22   23 #> [3,]   12    9   17   20   28   25 #> [4,]   10   11   18   19   26   27 #> [5,]   13   16   36   33    5    8 #> [6,]   14   15   34   35    6    7 is.magic(magic.4np2(3)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular magic squares of order 8 — magic.8","title":"Regular magic squares of order 8 — magic.8","text":"Returns 90 regular magic squares order 8","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular magic squares of order 8 — magic.8","text":"","code":"magic.8(...)"},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regular magic squares of order 8 — magic.8","text":"... ignored","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regular magic squares of order 8 — magic.8","text":"Returns array dimensions c(8, 8, 90) slice 8--8 magic square.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regular magic squares of order 8 — magic.8","text":"https://www.grogono.com/magic/index.php","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regular magic squares of order 8 — magic.8","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regular magic squares of order 8 — magic.8","text":"","code":"h <- magic.8() h[,,1] #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    9   48   40   32   24   49   57 #> [2,]    2   10   47   39   31   23   50   58 #> [3,]   62   54   19   27   35   43   14    6 #> [4,]   61   53   20   28   36   44   13    5 #> [5,]   60   52   21   29   37   45   12    4 #> [6,]   59   51   22   30   38   46   11    3 #> [7,]    7   15   42   34   26   18   55   63 #> [8,]    8   16   41   33   25   17   56   64  stopifnot(apply(h,3,is.magic))"},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic constant of a magic square or hypercube — magic.constant","title":"Magic constant of a magic square or hypercube — magic.constant","text":"Returns magic constant: , common sum rows,   columns (broken) diagonals magic square hypercube","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic constant of a magic square or hypercube — magic.constant","text":"","code":"magic.constant(n,d=2,start=1)"},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic constant of a magic square or hypercube — magic.constant","text":"n Order square hypercube d Dimension hypercube, defaulting d=2 (square) start Start value.  Common values 0 1","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magic constant of a magic square or hypercube — magic.constant","text":"n integer, interpret order square   hypercube; return \\(n({\\rm start}+n^d-1)/2\\). n square hypercube, return magic constant   normal array (starting 1) dimensions n.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic constant of a magic square or hypercube — magic.constant","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magic.constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic constant of a magic square or hypercube — magic.constant","text":"","code":"magic.constant(4) #> [1] 34"},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates magic squares — magic","title":"Creates magic squares — magic","text":"Creates normal magic squares order \\(>2\\).  Uses   appropriate method depending n modulo 4.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates magic squares — magic","text":"","code":"magic(n)"},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates magic squares — magic","text":"n Order magic square.  vector, return list whose     \\(\\)-th element magic square order n[]","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates magic squares — magic","text":"Calls either magic.2np1(), magic.4n(), magic.4np2() depending value n.  Returns magic square standard format (compare magic.2np1() et seq, return square generated direct algorithm).","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates magic squares — magic","text":"William H. Benson Oswald Jacoby.  New recreations   magic squares. Dover 1976.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates magic squares — magic","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates magic squares — magic","text":"","code":"magic(6) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    7    6   35   34   15   14 #> [2,]    8    5   33   36   16   13 #> [3,]   27   26   19   18   11   10 #> [4,]   25   28   20   17    9   12 #> [5,]   23   22    3    2   31   30 #> [6,]   21   24    1    4   29   32 all(is.magic(magic(3:10))) #> [1] TRUE  ## The first eigenvalue of a magic square is equal to the magic constant: eigen(magic(10),FALSE,TRUE)$values[1] - magic.constant(10) #> [1] -4.547474e-13  ## The sum of the eigenvalues of a magic square after the first is zero: sum(eigen(magic(10),FALSE,TRUE)$values[2:10]) #> [1] 3.026023e-13"},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic squares prime order — magic.prime","title":"Magic squares prime order — magic.prime","text":"Produces magic squares prime order using standard method","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic squares prime order — magic.prime","text":"","code":"magic.prime(n,i=2,j=3)"},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic squares prime order — magic.prime","text":"n order square row number increment j column number increment","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magic squares prime order — magic.prime","text":"Claimed work order prime \\(p\\) \\((p,ij)=1\\), tried (defaults j) many composite integers form \\(6n+1\\) \\(6n-1\\) found exceptions; indeed, seem panmagic.  clear process works .","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic squares prime order — magic.prime","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.prime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic squares prime order — magic.prime","text":"","code":"magic.prime(7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    9   17   25   33   41   49 #> [2,]   40   48    7    8   16   24   32 #> [3,]   23   31   39   47    6   14   15 #> [4,]   13   21   22   30   38   46    5 #> [5,]   45    4   12   20   28   29   37 #> [6,]   35   36   44    3   11   19   27 #> [7,]   18   26   34   42   43    2   10 f <- function(n){is.magic(magic.prime(n))} all(sapply(6*1:30+1,f)) #> [1] TRUE all(sapply(6*1:30-1,f)) #> [1] TRUE  is.magic(magic.prime(9,i=2,j=4),give.answers=TRUE) #> $answer #> [1] FALSE #>  #> $rowsums #> [1] 369 369 369 369 369 369 369 369 369 #>  #> $colsums #> [1] 369 369 369 369 369 369 369 369 369 #>  #> $majors #> [1] 360 369 378 360 369 378 360 369 378 #>  #> $minors #> [1] 450 288 369 450 288 369 450 288 369 #>  magic.prime(7,i=2,j=4) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    9   17   25   33   41   49 #> [2,]   39   47    6   14   15   23   31 #> [3,]   28   29   37   45    4   12   20 #> [4,]   10   18   26   34   42   43    2 #> [5,]   48    7    8   16   24   32   40 #> [6,]   30   38   46    5   13   21   22 #> [7,]   19   27   35   36   44    3   11"},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":null,"dir":"Reference","previous_headings":"","what":"Product of two magic squares — magic.product","title":"Product of two magic squares — magic.product","text":"Gives magic square product two magic squares.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product of two magic squares — magic.product","text":"","code":"magic.product(a, b, mat=NULL) magic.product.fast(a, b)"},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Product of two magic squares — magic.product","text":"First magic square; integer, use magic(). b mat Matrix, size , integers treated     modulo 8.  Default value NULL equivalent passing     *0.  number 0-7 corresponds one 8     squares Frenicle's standard form, generated     transf().      subsquares product square (ie tiles size     b) rotated transposed appropriately according     corresponding entry mat.  lot easier     see describe (see examples section).","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Product of two magic squares — magic.product","text":"Function magic.product.fast() take mat   argument, equivalent magic.product() mat   taking default value NULL.  improvement speed   doubtful unless order()\\(\\gg\\)order(b),   case appears substantial saving.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Product of two magic squares — magic.product","text":"William H. Benson Oswald Jacoby. New recreations magic   squares, Dover 1976 (paper JRM)","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Product of two magic squares — magic.product","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magic.product.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Product of two magic squares — magic.product","text":"","code":"magic.product(magic(3),magic(4)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]   17   28   24   29   97  108  104  109   81    92    88    93 #>  [2,]   31   22   26   19  111  102  106   99   95    86    90    83 #>  [3,]   30   23   27   18  110  103  107   98   94    87    91    82 #>  [4,]   20   25   21   32  100  105  101  112   84    89    85    96 #>  [5,]  129  140  136  141   65   76   72   77    1    12     8    13 #>  [6,]  143  134  138  131   79   70   74   67   15     6    10     3 #>  [7,]  142  135  139  130   78   71   75   66   14     7    11     2 #>  [8,]  132  137  133  144   68   73   69   80    4     9     5    16 #>  [9,]   49   60   56   61   33   44   40   45  113   124   120   125 #> [10,]   63   54   58   51   47   38   42   35  127   118   122   115 #> [11,]   62   55   59   50   46   39   43   34  126   119   123   114 #> [12,]   52   57   53   64   36   41   37   48  116   121   117   128 magic.product(3,4) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]   17   28   24   29   97  108  104  109   81    92    88    93 #>  [2,]   31   22   26   19  111  102  106   99   95    86    90    83 #>  [3,]   30   23   27   18  110  103  107   98   94    87    91    82 #>  [4,]   20   25   21   32  100  105  101  112   84    89    85    96 #>  [5,]  129  140  136  141   65   76   72   77    1    12     8    13 #>  [6,]  143  134  138  131   79   70   74   67   15     6    10     3 #>  [7,]  142  135  139  130   78   71   75   66   14     7    11     2 #>  [8,]  132  137  133  144   68   73   69   80    4     9     5    16 #>  [9,]   49   60   56   61   33   44   40   45  113   124   120   125 #> [10,]   63   54   58   51   47   38   42   35  127   118   122   115 #> [11,]   62   55   59   50   46   39   43   34  126   119   123   114 #> [12,]   52   57   53   64   36   41   37   48  116   121   117   128  mat <- matrix(0,3,3) a <- magic.product(3,4,mat=mat) mat[1,1] <- 1 b <- magic.product(3,4,mat=mat)  a==b #>        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]  TRUE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [2,] FALSE  TRUE FALSE FALSE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [3,] FALSE FALSE  TRUE FALSE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [4,] FALSE FALSE FALSE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [5,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [6,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [7,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [8,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #>  [9,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #> [10,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #> [11,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE #> [12,]  TRUE  TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE  TRUE  TRUE  TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic cubes of order 2n+1 — magiccube.2np1","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"Creates odd-order magic cubes","code":""},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"","code":"magiccube.2np1(m)"},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"m n=2m+1","code":""},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"website","code":""},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/magiccube.2np1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic cubes of order 2n+1 — magiccube.2np1","text":"","code":"#try with m=3, n=2*3+1=7:  m <-7                      n <- 2*m+1   apply(magiccube.2np1(m),c(1,2),sum) #>        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12] #>  [1,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [2,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [3,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [4,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [5,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [6,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [7,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [8,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [9,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [10,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [11,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [12,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [13,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [14,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [15,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>       [,13] [,14] [,15] #>  [1,] 25320 25320 25320 #>  [2,] 25320 25320 25320 #>  [3,] 25320 25320 25320 #>  [4,] 25320 25320 25320 #>  [5,] 25320 25320 25320 #>  [6,] 25320 25320 25320 #>  [7,] 25320 25320 25320 #>  [8,] 25320 25320 25320 #>  [9,] 25320 25320 25320 #> [10,] 25320 25320 25320 #> [11,] 25320 25320 25320 #> [12,] 25320 25320 25320 #> [13,] 25320 25320 25320 #> [14,] 25320 25320 25320 #> [15,] 25320 25320 25320 apply(magiccube.2np1(m),c(1,3),sum) #>        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12] #>  [1,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [2,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [3,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [4,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [5,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [6,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [7,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [8,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [9,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [10,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [11,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [12,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [13,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [14,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [15,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>       [,13] [,14] [,15] #>  [1,] 25320 25320 25320 #>  [2,] 25320 25320 25320 #>  [3,] 25320 25320 25320 #>  [4,] 25320 25320 25320 #>  [5,] 25320 25320 25320 #>  [6,] 25320 25320 25320 #>  [7,] 25320 25320 25320 #>  [8,] 25320 25320 25320 #>  [9,] 25320 25320 25320 #> [10,] 25320 25320 25320 #> [11,] 25320 25320 25320 #> [12,] 25320 25320 25320 #> [13,] 25320 25320 25320 #> [14,] 25320 25320 25320 #> [15,] 25320 25320 25320 apply(magiccube.2np1(m),c(2,3),sum) #>        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12] #>  [1,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [2,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [3,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [4,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [5,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [6,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [7,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [8,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>  [9,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [10,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [11,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [12,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [13,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [14,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #> [15,] 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 25320 #>       [,13] [,14] [,15] #>  [1,] 25320 25320 25320 #>  [2,] 25320 25320 25320 #>  [3,] 25320 25320 25320 #>  [4,] 25320 25320 25320 #>  [5,] 25320 25320 25320 #>  [6,] 25320 25320 25320 #>  [7,] 25320 25320 25320 #>  [8,] 25320 25320 25320 #>  [9,] 25320 25320 25320 #> [10,] 25320 25320 25320 #> [11,] 25320 25320 25320 #> [12,] 25320 25320 25320 #> [13,] 25320 25320 25320 #> [14,] 25320 25320 25320 #> [15,] 25320 25320 25320  #major diagonal checks out: sum(magiccube.2np1(m)[matrix(1:n,n,3)]) #> [1] 25320  #now other diagonals: b <- c(-1,1) f <- function(dir,v){if(dir>0){return(v)}else{return(rev(v))}} g <- function(jj){sum(magiccube.2np1(m)[sapply(jj,f,v=1:n)])} apply(expand.grid(b,b,b),1,g)  #each diagonal twice, once per direction. #> [1] 25320 25320 25320 25320 25320 25320 25320 25320"},{"path":"https://robinhankin.github.io/magic/reference/magiccubes.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic cubes of order 3 — magiccubes","title":"Magic cubes of order 3 — magiccubes","text":"list four elements listing fundamentally different magic cube order 3","code":""},{"path":"https://robinhankin.github.io/magic/reference/magiccubes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic cubes of order 3 — magiccubes","text":"","code":"data(magiccubes)"},{"path":"https://robinhankin.github.io/magic/reference/magiccubes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Magic cubes of order 3 — magiccubes","text":"Originally discovered Hendricks","code":""},{"path":"https://robinhankin.github.io/magic/reference/magiccubes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic cubes of order 3 — magiccubes","text":"","code":"data(magiccubes) magiccubes$a1 #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    2   22   18 #> [2,]   13    9   20 #> [3,]   27   11    4 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]   16    3   23 #> [2,]   21   14    7 #> [3,]    5   25   12 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]   24   17    1 #> [2,]    8   19   15 #> [3,]   10    6   26 #>  sapply(magiccubes,is.magichypercube) #>   a1   a2   a3   a4  #> TRUE TRUE TRUE TRUE"},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":null,"dir":"Reference","previous_headings":"","what":"Magic hypercubes of order 4n — magichypercube.4n","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"Returns magic hypercubes order 4n dimension.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"","code":"magichypercube.4n(m, d = 3)"},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"m Magic hypercube produced order \\(n=4m\\) d Dimensionality cube","code":""},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"Uses rather kludgy (vectorized) method.  100% sure method fact produce magic squares orders dimensions.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magichypercube.4n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magic hypercubes of order 4n — magichypercube.4n","text":"","code":"magichypercube.4n(1,d=4) #> , , 1, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1  252  248   13 #> [2,]  255    6   10  243 #> [3,]  254    7   11  242 #> [4,]    4  249  245   16 #>  #> , , 2, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  240   21   25  228 #> [2,]   18  235  231   30 #> [3,]   19  234  230   31 #> [4,]  237   24   28  225 #>  #> , , 3, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  224   37   41  212 #> [2,]   34  219  215   46 #> [3,]   35  218  214   47 #> [4,]  221   40   44  209 #>  #> , , 4, 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   49  204  200   61 #> [2,]  207   54   58  195 #> [3,]  206   55   59  194 #> [4,]   52  201  197   64 #>  #> , , 1, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  192   69   73  180 #> [2,]   66  187  183   78 #> [3,]   67  186  182   79 #> [4,]  189   72   76  177 #>  #> , , 2, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   81  172  168   93 #> [2,]  175   86   90  163 #> [3,]  174   87   91  162 #> [4,]   84  169  165   96 #>  #> , , 3, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   97  156  152  109 #> [2,]  159  102  106  147 #> [3,]  158  103  107  146 #> [4,]  100  153  149  112 #>  #> , , 4, 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  144  117  121  132 #> [2,]  114  139  135  126 #> [3,]  115  138  134  127 #> [4,]  141  120  124  129 #>  #> , , 1, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  128  133  137  116 #> [2,]  130  123  119  142 #> [3,]  131  122  118  143 #> [4,]  125  136  140  113 #>  #> , , 2, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  145  108  104  157 #> [2,]  111  150  154   99 #> [3,]  110  151  155   98 #> [4,]  148  105  101  160 #>  #> , , 3, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  161   92   88  173 #> [2,]   95  166  170   83 #> [3,]   94  167  171   82 #> [4,]  164   89   85  176 #>  #> , , 4, 3 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   80  181  185   68 #> [2,]  178   75   71  190 #> [3,]  179   74   70  191 #> [4,]   77  184  188   65 #>  #> , , 1, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  193   60   56  205 #> [2,]   63  198  202   51 #> [3,]   62  199  203   50 #> [4,]  196   57   53  208 #>  #> , , 2, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   48  213  217   36 #> [2,]  210   43   39  222 #> [3,]  211   42   38  223 #> [4,]   45  216  220   33 #>  #> , , 3, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   32  229  233   20 #> [2,]  226   27   23  238 #> [3,]  227   26   22  239 #> [4,]   29  232  236   17 #>  #> , , 4, 4 #>  #>      [,1] [,2] [,3] [,4] #> [1,]  241   12    8  253 #> [2,]   15  246  250    3 #> [3,]   14  247  251    2 #> [4,]  244    9    5  256 #>  magichypercube.4n(2,d=3) #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  512    9   17  488  480   41   49  456 #> [2,]    2  503  495   26   34  471  463   58 #> [3,]    3  502  494   27   35  470  462   59 #> [4,]  509   12   20  485  477   44   52  453 #> [5,]  508   13   21  484  476   45   53  452 #> [6,]    6  499  491   30   38  467  459   62 #> [7,]    7  498  490   31   39  466  458   63 #> [8,]  505   16   24  481  473   48   56  449 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]   65  440  432   89   97  408  400  121 #> [2,]  447   74   82  423  415  106  114  391 #> [3,]  446   75   83  422  414  107  115  390 #> [4,]   68  437  429   92  100  405  397  124 #> [5,]   69  436  428   93  101  404  396  125 #> [6,]  443   78   86  419  411  110  118  387 #> [7,]  442   79   87  418  410  111  119  386 #> [8,]   72  433  425   96  104  401  393  128 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  129  376  368  153  161  344  336  185 #> [2,]  383  138  146  359  351  170  178  327 #> [3,]  382  139  147  358  350  171  179  326 #> [4,]  132  373  365  156  164  341  333  188 #> [5,]  133  372  364  157  165  340  332  189 #> [6,]  379  142  150  355  347  174  182  323 #> [7,]  378  143  151  354  346  175  183  322 #> [8,]  136  369  361  160  168  337  329  192 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  320  201  209  296  288  233  241  264 #> [2,]  194  311  303  218  226  279  271  250 #> [3,]  195  310  302  219  227  278  270  251 #> [4,]  317  204  212  293  285  236  244  261 #> [5,]  316  205  213  292  284  237  245  260 #> [6,]  198  307  299  222  230  275  267  254 #> [7,]  199  306  298  223  231  274  266  255 #> [8,]  313  208  216  289  281  240  248  257 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  256  265  273  232  224  297  305  200 #> [2,]  258  247  239  282  290  215  207  314 #> [3,]  259  246  238  283  291  214  206  315 #> [4,]  253  268  276  229  221  300  308  197 #> [5,]  252  269  277  228  220  301  309  196 #> [6,]  262  243  235  286  294  211  203  318 #> [7,]  263  242  234  287  295  210  202  319 #> [8,]  249  272  280  225  217  304  312  193 #>  #> , , 6 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  321  184  176  345  353  152  144  377 #> [2,]  191  330  338  167  159  362  370  135 #> [3,]  190  331  339  166  158  363  371  134 #> [4,]  324  181  173  348  356  149  141  380 #> [5,]  325  180  172  349  357  148  140  381 #> [6,]  187  334  342  163  155  366  374  131 #> [7,]  186  335  343  162  154  367  375  130 #> [8,]  328  177  169  352  360  145  137  384 #>  #> , , 7 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  385  120  112  409  417   88   80  441 #> [2,]  127  394  402  103   95  426  434   71 #> [3,]  126  395  403  102   94  427  435   70 #> [4,]  388  117  109  412  420   85   77  444 #> [5,]  389  116  108  413  421   84   76  445 #> [6,]  123  398  406   99   91  430  438   67 #> [7,]  122  399  407   98   90  431  439   66 #> [8,]  392  113  105  416  424   81   73  448 #>  #> , , 8 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]   64  457  465   40   32  489  497    8 #> [2,]  450   55   47  474  482   23   15  506 #> [3,]  451   54   46  475  483   22   14  507 #> [4,]   61  460  468   37   29  492  500    5 #> [5,]   60  461  469   36   28  493  501    4 #> [6,]  454   51   43  478  486   19   11  510 #> [7,]  455   50   42  479  487   18   10  511 #> [8,]   57  464  472   33   25  496  504    1 #>"},{"path":"https://robinhankin.github.io/magic/reference/magicplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins consecutive numbers of a magic square. — magicplot","title":"Joins consecutive numbers of a magic square. — magicplot","text":"nice way graphically represent normal magic squares.  Lines plotted join successive numbers 1 \\(n^2\\).  plot method produces pleasing images many magic squares.","code":""},{"path":"https://robinhankin.github.io/magic/reference/magicplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins consecutive numbers of a magic square. — magicplot","text":"","code":"magicplot(m, number = TRUE, do.circuit = FALSE, ...)"},{"path":"https://robinhankin.github.io/magic/reference/magicplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins consecutive numbers of a magic square. — magicplot","text":"m Magic square plotted number Boolean variable default TRUE meaning     include numbers plot .circuit Boolean variable default TRUE meaning     include line joining \\(n^2\\) 1 ... Extra parameters passed plot()","code":""},{"path":"https://robinhankin.github.io/magic/reference/magicplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joins consecutive numbers of a magic square. — magicplot","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/magicplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joins consecutive numbers of a magic square. — magicplot","text":"","code":"magicplot(magic.4n(2))"},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"are all elements of a vector identical? — minmax","title":"are all elements of a vector identical? — minmax","text":"Returns TRUE elements vector identical.","code":""},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"are all elements of a vector identical? — minmax","text":"","code":"minmax(x, tol=1e-6)"},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"are all elements of a vector identical? — minmax","text":"x Vector tested tol Relative tolerance allowed","code":""},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"are all elements of a vector identical? — minmax","text":"x integer, exact equality required.  real   complex, relative tolerance tol required.  Note   functions .magic() .semimagichypercube()   use default value tol.  change ,   define new Boolean function tests sum required   tolerance, set boolean TRUE","code":""},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"are all elements of a vector identical? — minmax","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/minmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"are all elements of a vector identical? — minmax","text":"","code":"data(Ollerenshaw) minmax(subsums(Ollerenshaw,2))  #should be TRUE, as per is.2x2.correct() #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":null,"dir":"Reference","previous_headings":"","what":"An unmagic square — notmagic.2n","title":"An unmagic square — notmagic.2n","text":"Returns square order \\(n=2m\\) claimed   magic, .","code":""},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An unmagic square — notmagic.2n","text":"","code":"notmagic.2n(m)"},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An unmagic square — notmagic.2n","text":"m Order square \\(n=2m\\)","code":""},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An unmagic square — notmagic.2n","text":"“Magic Squares Cubes”, Andrews, (book)","code":""},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An unmagic square — notmagic.2n","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"An unmagic square — notmagic.2n","text":"took whole evening code .  quite pleased   final vectorized form: matches Andrews's (8 8) example   square exactly.  crock","code":""},{"path":"https://robinhankin.github.io/magic/reference/notmagic.2n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An unmagic square — notmagic.2n","text":"","code":"notmagic.2n(4) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1   16   17   32   33   48   49   64 #> [2,]   63   50   47   34   31   18   15    2 #> [3,]    3   14   19   30   35   46   51   62 #> [4,]   61   52   45   36   29   20   13    4 #> [5,]    5   12   21   28   37   44   53   60 #> [6,]   59   54   43   38   27   22   11    6 #> [7,]    7   10   23   26   39   42   55   58 #> [8,]   57   56   41   40   25   24    9    8   is.magic(notmagic.2n(4)) #> [1] FALSE   is.semimagic(notmagic.2n(4)) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":null,"dir":"Reference","previous_headings":"","what":"N queens problem — nqueens","title":"N queens problem — nqueens","text":"Solves N queens problem n--n board.","code":""},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"N queens problem — nqueens","text":"","code":"bernhardsson(n) bernhardssonA(n) bernhardssonB(n)"},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"N queens problem — nqueens","text":"n Size chessboard","code":""},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"N queens problem — nqueens","text":"Uses direct transcript Bo Bernhardsson's method. solutions (reflection translation) 8--8 case   given examples.","code":""},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"N queens problem — nqueens","text":"Bo Bernhardsson 1991.  “Explicit solutions       n-queens problem \\(n\\)”.  SIGART Bull., 2(2):7 Weisstein, Eric W. “Queens Problem”     MathWorld–Wolfram Web Resource     https://mathworld.wolfram.com/QueensProblem.html","code":""},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"N queens problem — nqueens","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/nqueens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"N queens problem — nqueens","text":"","code":"bernhardsson(7) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    0    0    0    0    0    0 #> [2,]    0    0    1    0    0    0    0 #> [3,]    0    0    0    0    1    0    0 #> [4,]    0    0    0    0    0    0    1 #> [5,]    0    1    0    0    0    0    0 #> [6,]    0    0    0    1    0    0    0 #> [7,]    0    0    0    0    0    1    0  a <-   matrix(          c(3,6,2,7,1,4,8,5,            2,6,8,3,1,4,7,5,            6,3,7,2,4,8,1,5,            3,6,8,2,4,1,7,5,            4,8,1,3,6,2,7,5,            7,2,6,3,1,4,8,5,            2,6,1,7,4,8,3,5,            1,6,8,3,7,4,2,5,            1,5,8,6,3,7,2,4,            2,4,6,8,3,1,7,5,            6,3,1,8,4,2,7,5,            4,6,8,2,7,1,3,5)          ,8,12)  out <- array(0L,c(8,8,12)) for(i in 1:12){   out[cbind(seq_len(8),a[,i],i)] <- 1L }"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":null,"dir":"Reference","previous_headings":"","what":"Panmagic squares of order 4 — panmagic.4","title":"Panmagic squares of order 4 — panmagic.4","text":"Creates fundamentally different panmagic squares order 4.","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panmagic squares of order 4 — panmagic.4","text":"","code":"panmagic.4(vals = 2^(0:3))"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panmagic squares of order 4 — panmagic.4","text":"vals length four vector giving values combined     \\(2^4\\) possible ways.  Thus     vals = 2^sample(0:3) always gives normal square     (0-15 binary).","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panmagic squares of order 4 — panmagic.4","text":"https://www.grogono.com/magic/index.php","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panmagic squares of order 4 — panmagic.4","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/panmagic.4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panmagic squares of order 4 — panmagic.4","text":"","code":"panmagic.4() #>      [,1] [,2] [,3] [,4] #> [1,]    6   12    7    9 #> [2,]   15    1   14    4 #> [3,]   10    8   11    5 #> [4,]    3   13    2   16 panmagic.4(2^c(1,3,2,0)) #>      [,1] [,2] [,3] [,4] #> [1,]    7   12   13    2 #> [2,]   14    1    8   11 #> [3,]    4   15   10    5 #> [4,]    9    6    3   16 panmagic.4(10^(0:3)) #>      [,1] [,2] [,3] [,4] #> [1,]  102 1012  111 1001 #> [2,] 1111    1 1102   12 #> [3,] 1002  112 1011  101 #> [4,]   11 1101    2 1112"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":null,"dir":"Reference","previous_headings":"","what":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"Produce panmagic square order \\(4n\\) \\(6n\\pm 1\\) using   classical method","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"","code":"panmagic.6npm1(n) panmagic.6np1(m) panmagic.6nm1(m) panmagic.4n(m)"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"m Function panmagic.6np1(m) returns panmagic square     order \\(n=6m+1\\) \\(m\\geqslant 1\\), function     panmagic.6nm1(m) returns panmagic square order     \\(n=6m-1\\) \\(m\\geqslant 1\\), using classical method. Function panmagic.4n(m) returns magic square order   \\(n=4m\\) n Function panmagic.6npm1(n) returns   panmagic square order \\(n\\) \\(n=6m\\pm 1\\)","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"Function panmagic.6npm1(n) return square n   form \\(6m\\pm 1\\), necessarily   magic.","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"“Pandiagonal magic square.” Wikipedia, Free Encyclopedia. Wikimedia Foundation, Inc. 13 February 2013","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/panmagic.6npm1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panmagic squares of order 4n, 6n+1 and 6n-1 — panmagic.6npm1","text":"","code":"panmagic.6np1(1) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1   13   18   23   35   40   45 #> [2,]   37   49    5   10   15   27   32 #> [3,]   24   29   41   46    2   14   19 #> [4,]   11   16   28   33   38   43    6 #> [5,]   47    3    8   20   25   30   42 #> [6,]   34   39   44    7   12   17   22 #> [7,]   21   26   31   36   48    4    9 panmagic.6npm1(13) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    1   25   36   47   58   69   80  104  115   126   137   148   159 #>  [2,]  145  169   11   22   33   44   55   66   90   101   112   123   134 #>  [3,]  120  131  155  166    8   19   30   41   65    76    87    98   109 #>  [4,]   95  106  130  141  152  163    5   16   27    51    62    73    84 #>  [5,]   70   81   92  116  127  138  149  160    2    26    37    48    59 #>  [6,]   45   56   67   91  102  113  124  135  146   157    12    23    34 #>  [7,]   20   31   42   53   77   88   99  110  121   132   156   167     9 #>  [8,]  164    6   17   28   52   63   74   85   96   107   118   142   153 #>  [9,]  139  150  161    3   14   38   49   60   71    82    93   117   128 #> [10,]  114  125  136  147  158   13   24   35   46    57    68    79   103 #> [11,]   89  100  111  122  133  144  168   10   21    32    43    54    78 #> [12,]   64   75   86   97  108  119  143  154  165     7    18    29    40 #> [13,]   39   50   61   72   83   94  105  129  140   151   162     4    15  all(sapply(panmagic.6np1(1:3),is.panmagic)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":null,"dir":"Reference","previous_headings":"","what":"Panmagic squares of order 8 — panmagic.8","title":"Panmagic squares of order 8 — panmagic.8","text":"Produces wide class order 8 panmagic squares","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panmagic squares of order 8 — panmagic.8","text":"","code":"panmagic.8(chosen = 1:6, vals = 2^(0:5))"},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panmagic squares of order 8 — panmagic.8","text":"chosen magic carpets used combination vals values combined produce magic square.  Choosing   0:5 gives normal magic square.","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Panmagic squares of order 8 — panmagic.8","text":"https://www.grogono.com/magic/index.php","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Panmagic squares of order 8 — panmagic.8","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Panmagic squares of order 8 — panmagic.8","text":"choices chosen give normal magic squares.    seems clear pattern.  See website references details.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/panmagic.8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panmagic squares of order 8 — panmagic.8","text":"","code":"is.panmagic(panmagic.8(chosen=2:7)) #> [1] TRUE is.normal(panmagic.8(chosen=2:7)) #> [1] FALSE is.normal(panmagic.8(chosen=c(1,2,3,6,7,8))) #> [1] FALSE  #to see the twelve basis magic carpets, set argument 'chosen' to each #integer from 1 to 12 in turn, with vals=1:  panmagic.8(chosen=1,vals=1)-1 #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    1    0    0    1    1    0    0 #> [2,]    0    0    1    1    0    0    1    1 #> [3,]    1    1    0    0    1    1    0    0 #> [4,]    0    0    1    1    0    0    1    1 #> [5,]    0    0    1    1    0    0    1    1 #> [6,]    1    1    0    0    1    1    0    0 #> [7,]    0    0    1    1    0    0    1    1 #> [8,]    1    1    0    0    1    1    0    0 image(panmagic.8(chosen=12,vals=1))"},{"path":"https://robinhankin.github.io/magic/reference/perfectcube5.html","id":null,"dir":"Reference","previous_headings":"","what":"A perfect magic cube of order 5 — perfectcube5","title":"A perfect magic cube of order 5 — perfectcube5","text":"perfect cube order 5, due Trump Boyer","code":""},{"path":"https://robinhankin.github.io/magic/reference/perfectcube5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A perfect magic cube of order 5 — perfectcube5","text":"","code":"data(perfectcube5)"},{"path":"https://robinhankin.github.io/magic/reference/perfectcube5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A perfect magic cube of order 5 — perfectcube5","text":"","code":"data(perfectcube5) is.perfect(perfectcube5) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/perfectcube6.html","id":null,"dir":"Reference","previous_headings":"","what":"A perfect cube of order 6 — perfectcube6","title":"A perfect cube of order 6 — perfectcube6","text":"perfect cube order 6 originally due Trump","code":""},{"path":"https://robinhankin.github.io/magic/reference/perfectcube6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A perfect cube of order 6 — perfectcube6","text":"","code":"data(perfectcube6)"},{"path":"https://robinhankin.github.io/magic/reference/perfectcube6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A perfect cube of order 6 — perfectcube6","text":"","code":"data(perfectcube6) is.perfect(perfectcube6) #> [1] TRUE is.magichypercube(perfectcube6[2:5,2:5,2:5]) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/process.html","id":null,"dir":"Reference","previous_headings":"","what":"Force index arrays into range — process","title":"Force index arrays into range — process","text":"Forces (integer) array entries range 1-n, () taking entries modulo n, (ii) setting zero elements n. Useful modifying index arrays form suitable use magic squares.","code":""},{"path":"https://robinhankin.github.io/magic/reference/process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force index arrays into range — process","text":"","code":"process(x, n)"},{"path":"https://robinhankin.github.io/magic/reference/process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force index arrays into range — process","text":"x Index array processed n Modulo arithmetic used","code":""},{"path":"https://robinhankin.github.io/magic/reference/process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Force index arrays into range — process","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force index arrays into range — process","text":"","code":"# extract the broken diagonal of magic.2np1(4) that passes # through element [1,5]:  a <- magic.2np1(4) index <- t(c(1,5)+rbind(1:9,1:9)) a[process(index,9)] #> [1] 22 43 55 76 16 28 49 70  1"},{"path":"https://robinhankin.github.io/magic/reference/recurse.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively apply a permutation — recurse","title":"Recursively apply a permutation — recurse","text":"Recursively apply permutation vector arbitrary number times.  Negative times mean apply inverse permutation.","code":""},{"path":"https://robinhankin.github.io/magic/reference/recurse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively apply a permutation — recurse","text":"","code":"recurse(perm, i, start = seq_along(perm))"},{"path":"https://robinhankin.github.io/magic/reference/recurse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively apply a permutation — recurse","text":"perm Permutation (integers 1 length(start) order) start Start vector permuted Number times apply permutation.  =0 gives     start definition negative values use inverse     permutation","code":""},{"path":"https://robinhankin.github.io/magic/reference/recurse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recursively apply a permutation — recurse","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/recurse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively apply a permutation — recurse","text":"","code":"n <- 15 noquote(recurse(start=letters[1:n],perm=shift(1:n),i=0)) #>  [1] a b c d e f g h i j k l m n o noquote(recurse(start=letters[1:n],perm=shift(1:n),i=1)) #>  [1] o a b c d e f g h i j k l m n noquote(recurse(start=letters[1:n],perm=shift(1:n),i=2)) #>  [1] n o a b c d e f g h i j k l m  noquote(recurse(start=letters[1:n],perm=sample(n),i=1)) #>  [1] l g e o m a j b k i c h n d f noquote(recurse(start=letters[1:n],perm=sample(n),i=2)) #>  [1] a m h b d g k f e i n l o j c"},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse antimagic squares — sam","title":"Sparse antimagic squares — sam","text":"Produces antimagic square order \\(m\\) using   Gray MacDougall's method.","code":""},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse antimagic squares — sam","text":"","code":"sam(m, u, A = NULL, B = A)"},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse antimagic squares — sam","text":"m Order magic square (“n”:     terminology follows Gray MacDougall) u See details section , B Start latin squares, default NULL meaning     use circulant(m)","code":""},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse antimagic squares — sam","text":"Gray's terminology, sam(m, n) produces   \\(SAM(2m, 2u+1, 0)\\). method vectorized. test properties, use functions   .antimagic(), documented .magic.Rd.","code":""},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sparse antimagic squares — sam","text":". D. Gray J. . MacDougall 2006.  “Sparse anti-magic squares     vertex-magic labelings bipartite graphs”, Discrete   Mathematics, volume 306, pp2878-2892","code":""},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse antimagic squares — sam","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/sam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse antimagic squares — sam","text":"","code":"sam(6,2) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]   18   24    0    0    0    0    7   43   55     0     0     0 #>  [2,]    0   17   23    0    0    0    0    8   44    56     0     0 #>  [3,]    0    0   16   22    0    0    0    0    9    45    57     0 #>  [4,]    0    0    0   15   21    0    0    0    0    10    46    58 #>  [5,]    0    0    0    0   14   20   59    0    0     0    11    47 #>  [6,]   19    0    0    0    0   13   48   60    0     0     0    12 #>  [7,]   31   37   49    0    0    0    6   30    0     0     0     0 #>  [8,]    0   32   38   50    0    0    0    5   29     0     0     0 #>  [9,]    0    0   33   39   51    0    0    0    4    28     0     0 #> [10,]    0    0    0   34   40   52    0    0    0     3    27     0 #> [11,]   53    0    0    0   35   41    0    0    0     0     2    26 #> [12,]   42   54    0    0    0   36   25    0    0     0     0     1  jj <- matrix(c(      5, 2, 3, 4, 1,      3, 5, 4, 1, 2,      2, 3, 1, 5, 4,      4, 1, 2, 3, 5,       1, 4, 5, 2, 3), 5, 5)  is.sam(sam(5, 2, B = jj)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift origin of arrays and vectors — shift","title":"Shift origin of arrays and vectors — shift","text":"Shift origin arrays vectors.","code":""},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift origin of arrays and vectors — shift","text":"","code":"shift(x, i=1) ashift(a, v=rep(1,length(dim(a))))"},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift origin of arrays and vectors — shift","text":"x Vector shifted Number places elements shifted, default value     1 meaning put last element first, followed first     element, second, etc Array shifted v Vector numbers shifted dimension,     default value corresponding shift()ing dimension 1     unit.  length v less length(dim()),     padded zeros (thus scalar value indicates     first dimension shifted units)","code":""},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shift origin of arrays and vectors — shift","text":"Function shift(x,n) returns \\(P^n(x)\\) \\(P\\)   permutation \\((n,1,2,\\ldots,n-1)\\). Function ashift array generalization :   \\(n^{\\rm th}\\) dimension shifted v[n].    words,   ashift(,v)=[shift(1:(dim()[1]),v[1]),...,shift(1:(dim()[n]),v[n])].   named analogy abind() aperm(). function shifted semimagic square hypercube   semimagic shifted pandiagonal square hypercube   pandiagonal (note shifted magic square necessarily   magic, shifted perfect hypercube necessarily perfect).","code":""},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shift origin of arrays and vectors — shift","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift origin of arrays and vectors — shift","text":"","code":"shift(1:10,3) #>  [1]  8  9 10  1  2  3  4  5  6  7 m <- matrix(1:100,10,10) ashift(m,c(1,1)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  100   10   20   30   40   50   60   70   80    90 #>  [2,]   91    1   11   21   31   41   51   61   71    81 #>  [3,]   92    2   12   22   32   42   52   62   72    82 #>  [4,]   93    3   13   23   33   43   53   63   73    83 #>  [5,]   94    4   14   24   34   44   54   64   74    84 #>  [6,]   95    5   15   25   35   45   55   65   75    85 #>  [7,]   96    6   16   26   36   46   56   66   76    86 #>  [8,]   97    7   17   27   37   47   57   67   77    87 #>  [9,]   98    8   18   28   38   48   58   68   78    88 #> [10,]   99    9   19   29   39   49   59   69   79    89 ashift(m,c(0,1))    #note columns shifted by 1, rows unchanged. #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   91    1   11   21   31   41   51   61   71    81 #>  [2,]   92    2   12   22   32   42   52   62   72    82 #>  [3,]   93    3   13   23   33   43   53   63   73    83 #>  [4,]   94    4   14   24   34   44   54   64   74    84 #>  [5,]   95    5   15   25   35   45   55   65   75    85 #>  [6,]   96    6   16   26   36   46   56   66   76    86 #>  [7,]   97    7   17   27   37   47   57   67   77    87 #>  [8,]   98    8   18   28   38   48   58   68   78    88 #>  [9,]   99    9   19   29   39   49   59   69   79    89 #> [10,]  100   10   20   30   40   50   60   70   80    90 ashift(m,dim(m))    #m unchanged (Mnemonic). #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1   11   21   31   41   51   61   71   81    91 #>  [2,]    2   12   22   32   42   52   62   72   82    92 #>  [3,]    3   13   23   33   43   53   63   73   83    93 #>  [4,]    4   14   24   34   44   54   64   74   84    94 #>  [5,]    5   15   25   35   45   55   65   75   85    95 #>  [6,]    6   16   26   36   46   56   66   76   86    96 #>  [7,]    7   17   27   37   47   57   67   77   87    97 #>  [8,]    8   18   28   38   48   58   68   78   88    98 #>  [9,]    9   19   29   39   49   59   69   79   89    99 #> [10,]   10   20   30   40   50   60   70   80   90   100"},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":null,"dir":"Reference","previous_headings":"","what":"Strachey's algorithm for magic squares — strachey","title":"Strachey's algorithm for magic squares — strachey","text":"Uses Strachey's algorithm produce magic squares   singly-even order.","code":""},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strachey's algorithm for magic squares — strachey","text":"","code":"strachey(m, square=magic.2np1(m))"},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strachey's algorithm for magic squares — strachey","text":"m magic square produced order n=2m+1 square magic square order 2m+1 needed Strachey's     method.  Default value gives standard construction,      method work odd order magic square","code":""},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strachey's algorithm for magic squares — strachey","text":"Strachey's method essentially places four identical magic squares   order \\(2m+1\\) together form one \\(n=4m+2\\).    \\(0,n^2/4,n^2/2,3n^2/4\\) added   square; finally, certain squares swapped top   subsquare bottom subsquare. See final example illustration works,   using zero matrix submatrix.  Observe 75s   swapped 0s, 50s 25s.","code":""},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strachey's algorithm for magic squares — strachey","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/strachey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strachey's algorithm for magic squares — strachey","text":"","code":"strachey(3) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  177  186  195    1   10   19   28  128  137   146    99   108    68 #>  [2,]  185  194  154    9   18   27   29  136  145   105   107   116    76 #>  [3,]  193  153  155   17   26   35   37  144  104   106   115   124    84 #>  [4,]    5  161  163  172   34   36   45  103  112   114   123   132    85 #>  [5,]  160  162  171   33   42   44    4  111  113   122   131   140    93 #>  [6,]  168  170  179   41   43    3   12  119  121   130   139   141    52 #>  [7,]  169  178  187   49    2   11   20  120  129   138   147   100    60 #>  [8,]   30   39   48  148  157  166  175   79   88    97    50    59   117 #>  [9,]   38   47    7  156  165  174  176   87   96    56    58    67   125 #> [10,]   46    6    8  164  173  182  184   95   55    57    66    75   133 #> [11,]  152   14   16   25  181  183  192   54   63    65    74    83   134 #> [12,]   13   15   24  180  189  191  151   62   64    73    82    91   142 #> [13,]   21   23   32  188  190  150  159   70   72    81    90    92   101 #> [14,]   22   31   40  196  149  158  167   71   80    89    98    51   109 #>       [,14] #>  [1,]    77 #>  [2,]    78 #>  [3,]    86 #>  [4,]    94 #>  [5,]    53 #>  [6,]    61 #>  [7,]    69 #>  [8,]   126 #>  [9,]   127 #> [10,]   135 #> [11,]   143 #> [12,]   102 #> [13,]   110 #> [14,]   118  strachey(2,square=magic(5)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   84   77   25   18   11   59   52   75   68    36 #>  [2,]   78   96   19   12   10   53   71   69   62    35 #>  [3,]   22   95   88    6    4   72   70   63   56    29 #>  [4,]   91   89    7    5   23   66   64   57   55    48 #>  [5,]   90   83    1   24   17   65   58   51   74    42 #>  [6,]    9    2  100   93   86   34   27   50   43    61 #>  [7,]    3   21   94   87   85   28   46   44   37    60 #>  [8,]   97   20   13   81   79   47   45   38   31    54 #>  [9,]   16   14   82   80   98   41   39   32   30    73 #> [10,]   15    8   76   99   92   40   33   26   49    67   strachey(2,square=magic(5)) %eq%  strachey(2,square=t(magic(5))) #> [1] FALSE  #should be FALSE   #Show which numbers have been swapped:  strachey(2,square=matrix(0,5,5)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   75   75    0    0    0   50   50   50   50    25 #>  [2,]   75   75    0    0    0   50   50   50   50    25 #>  [3,]    0   75   75    0    0   50   50   50   50    25 #>  [4,]   75   75    0    0    0   50   50   50   50    25 #>  [5,]   75   75    0    0    0   50   50   50   50    25 #>  [6,]    0    0   75   75   75   25   25   25   25    50 #>  [7,]    0    0   75   75   75   25   25   25   25    50 #>  [8,]   75    0    0   75   75   25   25   25   25    50 #>  [9,]    0    0   75   75   75   25   25   25   25    50 #> [10,]    0    0   75   75   75   25   25   25   25    50   #It's still magic, but not normal:   is.magic(strachey(2,square=matrix(0,5,5))) #> [1] TRUE"},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sums of submatrices — subsums","title":"Sums of submatrices — subsums","text":"Returns sums submatrices array; multidimensional moving window averaging","code":""},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sums of submatrices — subsums","text":"","code":"subsums(a,p,func=\"sum\",wrap=TRUE, pad=0)"},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sums of submatrices — subsums","text":"Array analysed p Argument specifying subarrays summed.  vector   length greater one,   assumed length d=length(dim()),   interpreted dimensions subarrays,   size window's \\(n{^{\\rm th}}\\) dimension   [n].  length p one, recycling used. vector, assumed matrix d columns,   row representing coordinates elements summed.  See   examples.  func Function applied elements moving     window.  Default value sum gives sum used     .2x2.correct();  choices might mean,     prod, max. sum=\"\", return array dimension     c(dim(),prod(p)) hyperplane shifted version     . wrap Boolean, default value TRUE meaning view     array n-dimensional torus.  Thus,     x=subsums(,p,wrap=TRUE), dim()=c(a_1,...,a_d)     x[a_1,...,a_d] sum corner elements     . FALSE, wrap return array     dimension dim()+p-1. pad wrap TRUE, pad     value used   pad array .  Use “neutral” value ;     example, func=sum, use 0; max, use     \\(-\\infty\\).","code":""},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sums of submatrices — subsums","text":"offset specified allsums(,v)[1,1,...,1]=     sum([1:v[1],1:v[2],...,1:v[n]]), n=length(dim()). Function subsums() used .2x2.correct()   .diagonally.correct().","code":""},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sums of submatrices — subsums","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/magic/reference/subsums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sums of submatrices — subsums","text":"","code":"data(Ollerenshaw)   subsums(Ollerenshaw,c(2,2)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [2,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [3,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [4,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [5,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [6,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [7,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [8,]  286  286  286  286  286  286  286  286  286   286   286   286 #>  [9,]  286  286  286  286  286  286  286  286  286   286   286   286 #> [10,]  286  286  286  286  286  286  286  286  286   286   286   286 #> [11,]  286  286  286  286  286  286  286  286  286   286   286   286 #> [12,]  286  286  286  286  286  286  286  286  286   286   286   286   subsums(Ollerenshaw[,1:10],c(2,2)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  286  286  286  286  286  286  286  286  286   286 #>  [2,]  286  286  286  286  286  286  286  286  286   286 #>  [3,]  286  286  286  286  286  286  286  286  286   286 #>  [4,]  286  286  286  286  286  286  286  286  286   286 #>  [5,]  286  286  286  286  286  286  286  286  286   286 #>  [6,]  286  286  286  286  286  286  286  286  286   286 #>  [7,]  286  286  286  286  286  286  286  286  286   286 #>  [8,]  286  286  286  286  286  286  286  286  286   286 #>  [9,]  286  286  286  286  286  286  286  286  286   286 #> [10,]  286  286  286  286  286  286  286  286  286   286 #> [11,]  286  286  286  286  286  286  286  286  286   286 #> [12,]  286  286  286  286  286  286  286  286  286   286   subsums(Ollerenshaw, matrix(c(0,6),2,2)) # effectively, is.bree.correct() #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [2,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [3,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [4,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [5,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [6,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [7,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [8,]  143  143  143  143  143  143  143  143  143   143   143   143 #>  [9,]  143  143  143  143  143  143  143  143  143   143   143   143 #> [10,]  143  143  143  143  143  143  143  143  143   143   143   143 #> [11,]  143  143  143  143  143  143  143  143  143   143   143   143 #> [12,]  143  143  143  143  143  143  143  143  143   143   143   143    # multidimensional example.     a <- array(1,c(3,4,2))   subsums(a,2)             # note that p=2 is equivalent to p=c(2,2,2); #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    8    8    8    8 #> [2,]    8    8    8    8 #> [3,]    8    8    8    8 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    8    8    8    8 #> [2,]    8    8    8    8 #> [3,]    8    8    8    8 #>                             # all elements should be identical    subsums(a,2,wrap=FALSE)  #note \"middle\" elements > \"outer\" elements #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    2    2    1 #> [2,]    2    4    4    4    2 #> [3,]    2    4    4    4    2 #> [4,]    1    2    2    2    1 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    2    4    4    4    2 #> [2,]    4    8    8    8    4 #> [3,]    4    8    8    8    4 #> [4,]    2    4    4    4    2 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    2    2    1 #> [2,]    2    4    4    4    2 #> [3,]    2    4    4    4    2 #> [4,]    1    2    2    2    1 #>      #Example of nondefault function:   x <- matrix(1:42,6,7)   subsums(x,2,func=\"max\",pad=Inf,wrap=TRUE)   #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    8   14   20   26   32   38   38 #> [2,]    9   15   21   27   33   39   39 #> [3,]   10   16   22   28   34   40   40 #> [4,]   11   17   23   29   35   41   41 #> [5,]   12   18   24   30   36   42   42 #> [6,]   12   18   24   30   36   42   42   subsums(x,2,func=\"max\",pad=Inf,wrap=FALSE) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf #> [2,]  Inf    8   14   20   26   32   38  Inf #> [3,]  Inf    9   15   21   27   33   39  Inf #> [4,]  Inf   10   16   22   28   34   40  Inf #> [5,]  Inf   11   17   23   29   35   41  Inf #> [6,]  Inf   12   18   24   30   36   42  Inf #> [7,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf"},{"path":"https://robinhankin.github.io/magic/reference/transf.html","id":null,"dir":"Reference","previous_headings":"","what":"Frenicle's equivalent magic squares — transf","title":"Frenicle's equivalent magic squares — transf","text":"given magic square, returns one eight squares whose Frenicle's standard form .","code":""},{"path":"https://robinhankin.github.io/magic/reference/transf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frenicle's equivalent magic squares — transf","text":"","code":"transf(a, i)"},{"path":"https://robinhankin.github.io/magic/reference/transf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frenicle's equivalent magic squares — transf","text":"Magic square Integer, considered modulo 8.  Specifying 0-7 gives     different magic square","code":""},{"path":"https://robinhankin.github.io/magic/reference/transf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frenicle's equivalent magic squares — transf","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/magic/reference/transf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frenicle's equivalent magic squares — transf","text":"","code":"a <- magic(3) identical(transf(a,0),a) #> [1] TRUE  transf(a,1) #>      [,1] [,2] [,3] #> [1,]    2    9    4 #> [2,]    7    5    3 #> [3,]    6    1    8 transf(a,2) #>      [,1] [,2] [,3] #> [1,]    4    3    8 #> [2,]    9    5    1 #> [3,]    2    7    6  transf(a,1) %eq% transf(a,7) #> [1] FALSE"},{"path":"https://robinhankin.github.io/magic/news/index.html","id":"magic-16-1","dir":"Changelog","previous_headings":"","what":"magic 1.6-1","title":"magic 1.6-1","text":"CRAN release: 2022-11-16 code conduct contributors’ guide pkgdown","code":""},{"path":"https://robinhankin.github.io/magic/news/index.html","id":"magic-16-0","dir":"Changelog","previous_headings":"","what":"magic 1.6-0","title":"magic 1.6-0","text":"CRAN release: 2022-02-08 emphasis high-dimensional arrays rather magic hypercubes sticker now vignette new README minor bugfixes","code":""}]
